/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GithubTextMatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubTextMatch{}

// GithubTextMatch struct for GithubTextMatch
type GithubTextMatch struct {
	Fragment   *string       `json:"fragment,omitempty"`
	Matches    []GithubMatch `json:"matches,omitempty"`
	ObjectType *string       `json:"object_type,omitempty"`
	ObjectUrl  *string       `json:"object_url,omitempty"`
	Property   *string       `json:"property,omitempty"`
}

// NewGithubTextMatch instantiates a new GithubTextMatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubTextMatch() *GithubTextMatch {
	this := GithubTextMatch{}
	return &this
}

// NewGithubTextMatchWithDefaults instantiates a new GithubTextMatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubTextMatchWithDefaults() *GithubTextMatch {
	this := GithubTextMatch{}
	return &this
}

// GetFragment returns the Fragment field value if set, zero value otherwise.
func (o *GithubTextMatch) GetFragment() string {
	if o == nil || IsNil(o.Fragment) {
		var ret string
		return ret
	}
	return *o.Fragment
}

// GetFragmentOk returns a tuple with the Fragment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubTextMatch) GetFragmentOk() (*string, bool) {
	if o == nil || IsNil(o.Fragment) {
		return nil, false
	}
	return o.Fragment, true
}

// HasFragment returns a boolean if a field has been set.
func (o *GithubTextMatch) HasFragment() bool {
	if o != nil && !IsNil(o.Fragment) {
		return true
	}

	return false
}

// SetFragment gets a reference to the given string and assigns it to the Fragment field.
func (o *GithubTextMatch) SetFragment(v string) {
	o.Fragment = &v
}

// GetMatches returns the Matches field value if set, zero value otherwise.
func (o *GithubTextMatch) GetMatches() []GithubMatch {
	if o == nil || IsNil(o.Matches) {
		var ret []GithubMatch
		return ret
	}
	return o.Matches
}

// GetMatchesOk returns a tuple with the Matches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubTextMatch) GetMatchesOk() ([]GithubMatch, bool) {
	if o == nil || IsNil(o.Matches) {
		return nil, false
	}
	return o.Matches, true
}

// HasMatches returns a boolean if a field has been set.
func (o *GithubTextMatch) HasMatches() bool {
	if o != nil && !IsNil(o.Matches) {
		return true
	}

	return false
}

// SetMatches gets a reference to the given []GithubMatch and assigns it to the Matches field.
func (o *GithubTextMatch) SetMatches(v []GithubMatch) {
	o.Matches = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *GithubTextMatch) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubTextMatch) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *GithubTextMatch) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *GithubTextMatch) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetObjectUrl returns the ObjectUrl field value if set, zero value otherwise.
func (o *GithubTextMatch) GetObjectUrl() string {
	if o == nil || IsNil(o.ObjectUrl) {
		var ret string
		return ret
	}
	return *o.ObjectUrl
}

// GetObjectUrlOk returns a tuple with the ObjectUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubTextMatch) GetObjectUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectUrl) {
		return nil, false
	}
	return o.ObjectUrl, true
}

// HasObjectUrl returns a boolean if a field has been set.
func (o *GithubTextMatch) HasObjectUrl() bool {
	if o != nil && !IsNil(o.ObjectUrl) {
		return true
	}

	return false
}

// SetObjectUrl gets a reference to the given string and assigns it to the ObjectUrl field.
func (o *GithubTextMatch) SetObjectUrl(v string) {
	o.ObjectUrl = &v
}

// GetProperty returns the Property field value if set, zero value otherwise.
func (o *GithubTextMatch) GetProperty() string {
	if o == nil || IsNil(o.Property) {
		var ret string
		return ret
	}
	return *o.Property
}

// GetPropertyOk returns a tuple with the Property field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubTextMatch) GetPropertyOk() (*string, bool) {
	if o == nil || IsNil(o.Property) {
		return nil, false
	}
	return o.Property, true
}

// HasProperty returns a boolean if a field has been set.
func (o *GithubTextMatch) HasProperty() bool {
	if o != nil && !IsNil(o.Property) {
		return true
	}

	return false
}

// SetProperty gets a reference to the given string and assigns it to the Property field.
func (o *GithubTextMatch) SetProperty(v string) {
	o.Property = &v
}

func (o GithubTextMatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubTextMatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fragment) {
		toSerialize["fragment"] = o.Fragment
	}
	if !IsNil(o.Matches) {
		toSerialize["matches"] = o.Matches
	}
	if !IsNil(o.ObjectType) {
		toSerialize["object_type"] = o.ObjectType
	}
	if !IsNil(o.ObjectUrl) {
		toSerialize["object_url"] = o.ObjectUrl
	}
	if !IsNil(o.Property) {
		toSerialize["property"] = o.Property
	}
	return toSerialize, nil
}

type NullableGithubTextMatch struct {
	value *GithubTextMatch
	isSet bool
}

func (v NullableGithubTextMatch) Get() *GithubTextMatch {
	return v.value
}

func (v *NullableGithubTextMatch) Set(val *GithubTextMatch) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubTextMatch) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubTextMatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubTextMatch(val *GithubTextMatch) *NullableGithubTextMatch {
	return &NullableGithubTextMatch{value: val, isSet: true}
}

func (v NullableGithubTextMatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubTextMatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
