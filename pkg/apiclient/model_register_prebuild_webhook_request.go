/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the RegisterPrebuildWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterPrebuildWebhookRequest{}

// RegisterPrebuildWebhookRequest struct for RegisterPrebuildWebhookRequest
type RegisterPrebuildWebhookRequest struct {
	GitUrl *string `json:"gitUrl,omitempty"`
}

// NewRegisterPrebuildWebhookRequest instantiates a new RegisterPrebuildWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterPrebuildWebhookRequest() *RegisterPrebuildWebhookRequest {
	this := RegisterPrebuildWebhookRequest{}
	return &this
}

// NewRegisterPrebuildWebhookRequestWithDefaults instantiates a new RegisterPrebuildWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterPrebuildWebhookRequestWithDefaults() *RegisterPrebuildWebhookRequest {
	this := RegisterPrebuildWebhookRequest{}
	return &this
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *RegisterPrebuildWebhookRequest) GetGitUrl() string {
	if o == nil || IsNil(o.GitUrl) {
		var ret string
		return ret
	}
	return *o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterPrebuildWebhookRequest) GetGitUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitUrl) {
		return nil, false
	}
	return o.GitUrl, true
}

// HasGitUrl returns a boolean if a field has been set.
func (o *RegisterPrebuildWebhookRequest) HasGitUrl() bool {
	if o != nil && !IsNil(o.GitUrl) {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given string and assigns it to the GitUrl field.
func (o *RegisterPrebuildWebhookRequest) SetGitUrl(v string) {
	o.GitUrl = &v
}

func (o RegisterPrebuildWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterPrebuildWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GitUrl) {
		toSerialize["gitUrl"] = o.GitUrl
	}
	return toSerialize, nil
}

type NullableRegisterPrebuildWebhookRequest struct {
	value *RegisterPrebuildWebhookRequest
	isSet bool
}

func (v NullableRegisterPrebuildWebhookRequest) Get() *RegisterPrebuildWebhookRequest {
	return v.value
}

func (v *NullableRegisterPrebuildWebhookRequest) Set(val *RegisterPrebuildWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterPrebuildWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterPrebuildWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterPrebuildWebhookRequest(val *RegisterPrebuildWebhookRequest) *NullableRegisterPrebuildWebhookRequest {
	return &NullableRegisterPrebuildWebhookRequest{value: val, isSet: true}
}

func (v NullableRegisterPrebuildWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterPrebuildWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
