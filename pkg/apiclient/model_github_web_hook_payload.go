/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GithubWebHookPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubWebHookPayload{}

// GithubWebHookPayload struct for GithubWebHookPayload
type GithubWebHookPayload struct {
	After      *string               `json:"after,omitempty"`
	Before     *string               `json:"before,omitempty"`
	Commits    []GithubWebHookCommit `json:"commits,omitempty"`
	Compare    *string               `json:"compare,omitempty"`
	Created    *bool                 `json:"created,omitempty"`
	Deleted    *bool                 `json:"deleted,omitempty"`
	Forced     *bool                 `json:"forced,omitempty"`
	HeadCommit *GithubWebHookCommit  `json:"head_commit,omitempty"`
	Pusher     *GithubUser           `json:"pusher,omitempty"`
	Ref        *string               `json:"ref,omitempty"`
	Repository *GithubRepository     `json:"repository,omitempty"`
	Sender     *GithubUser           `json:"sender,omitempty"`
}

// NewGithubWebHookPayload instantiates a new GithubWebHookPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubWebHookPayload() *GithubWebHookPayload {
	this := GithubWebHookPayload{}
	return &this
}

// NewGithubWebHookPayloadWithDefaults instantiates a new GithubWebHookPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubWebHookPayloadWithDefaults() *GithubWebHookPayload {
	this := GithubWebHookPayload{}
	return &this
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetAfter() string {
	if o == nil || IsNil(o.After) {
		var ret string
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetAfterOk() (*string, bool) {
	if o == nil || IsNil(o.After) {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasAfter() bool {
	if o != nil && !IsNil(o.After) {
		return true
	}

	return false
}

// SetAfter gets a reference to the given string and assigns it to the After field.
func (o *GithubWebHookPayload) SetAfter(v string) {
	o.After = &v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetBefore() string {
	if o == nil || IsNil(o.Before) {
		var ret string
		return ret
	}
	return *o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetBeforeOk() (*string, bool) {
	if o == nil || IsNil(o.Before) {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasBefore() bool {
	if o != nil && !IsNil(o.Before) {
		return true
	}

	return false
}

// SetBefore gets a reference to the given string and assigns it to the Before field.
func (o *GithubWebHookPayload) SetBefore(v string) {
	o.Before = &v
}

// GetCommits returns the Commits field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetCommits() []GithubWebHookCommit {
	if o == nil || IsNil(o.Commits) {
		var ret []GithubWebHookCommit
		return ret
	}
	return o.Commits
}

// GetCommitsOk returns a tuple with the Commits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetCommitsOk() ([]GithubWebHookCommit, bool) {
	if o == nil || IsNil(o.Commits) {
		return nil, false
	}
	return o.Commits, true
}

// HasCommits returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasCommits() bool {
	if o != nil && !IsNil(o.Commits) {
		return true
	}

	return false
}

// SetCommits gets a reference to the given []GithubWebHookCommit and assigns it to the Commits field.
func (o *GithubWebHookPayload) SetCommits(v []GithubWebHookCommit) {
	o.Commits = v
}

// GetCompare returns the Compare field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetCompare() string {
	if o == nil || IsNil(o.Compare) {
		var ret string
		return ret
	}
	return *o.Compare
}

// GetCompareOk returns a tuple with the Compare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetCompareOk() (*string, bool) {
	if o == nil || IsNil(o.Compare) {
		return nil, false
	}
	return o.Compare, true
}

// HasCompare returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasCompare() bool {
	if o != nil && !IsNil(o.Compare) {
		return true
	}

	return false
}

// SetCompare gets a reference to the given string and assigns it to the Compare field.
func (o *GithubWebHookPayload) SetCompare(v string) {
	o.Compare = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetCreated() bool {
	if o == nil || IsNil(o.Created) {
		var ret bool
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetCreatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given bool and assigns it to the Created field.
func (o *GithubWebHookPayload) SetCreated(v bool) {
	o.Created = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetDeleted() bool {
	if o == nil || IsNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deleted) {
		return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasDeleted() bool {
	if o != nil && !IsNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *GithubWebHookPayload) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetForced returns the Forced field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetForced() bool {
	if o == nil || IsNil(o.Forced) {
		var ret bool
		return ret
	}
	return *o.Forced
}

// GetForcedOk returns a tuple with the Forced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetForcedOk() (*bool, bool) {
	if o == nil || IsNil(o.Forced) {
		return nil, false
	}
	return o.Forced, true
}

// HasForced returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasForced() bool {
	if o != nil && !IsNil(o.Forced) {
		return true
	}

	return false
}

// SetForced gets a reference to the given bool and assigns it to the Forced field.
func (o *GithubWebHookPayload) SetForced(v bool) {
	o.Forced = &v
}

// GetHeadCommit returns the HeadCommit field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetHeadCommit() GithubWebHookCommit {
	if o == nil || IsNil(o.HeadCommit) {
		var ret GithubWebHookCommit
		return ret
	}
	return *o.HeadCommit
}

// GetHeadCommitOk returns a tuple with the HeadCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetHeadCommitOk() (*GithubWebHookCommit, bool) {
	if o == nil || IsNil(o.HeadCommit) {
		return nil, false
	}
	return o.HeadCommit, true
}

// HasHeadCommit returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasHeadCommit() bool {
	if o != nil && !IsNil(o.HeadCommit) {
		return true
	}

	return false
}

// SetHeadCommit gets a reference to the given GithubWebHookCommit and assigns it to the HeadCommit field.
func (o *GithubWebHookPayload) SetHeadCommit(v GithubWebHookCommit) {
	o.HeadCommit = &v
}

// GetPusher returns the Pusher field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetPusher() GithubUser {
	if o == nil || IsNil(o.Pusher) {
		var ret GithubUser
		return ret
	}
	return *o.Pusher
}

// GetPusherOk returns a tuple with the Pusher field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetPusherOk() (*GithubUser, bool) {
	if o == nil || IsNil(o.Pusher) {
		return nil, false
	}
	return o.Pusher, true
}

// HasPusher returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasPusher() bool {
	if o != nil && !IsNil(o.Pusher) {
		return true
	}

	return false
}

// SetPusher gets a reference to the given GithubUser and assigns it to the Pusher field.
func (o *GithubWebHookPayload) SetPusher(v GithubUser) {
	o.Pusher = &v
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *GithubWebHookPayload) SetRef(v string) {
	o.Ref = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetRepository() GithubRepository {
	if o == nil || IsNil(o.Repository) {
		var ret GithubRepository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetRepositoryOk() (*GithubRepository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given GithubRepository and assigns it to the Repository field.
func (o *GithubWebHookPayload) SetRepository(v GithubRepository) {
	o.Repository = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *GithubWebHookPayload) GetSender() GithubUser {
	if o == nil || IsNil(o.Sender) {
		var ret GithubUser
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookPayload) GetSenderOk() (*GithubUser, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *GithubWebHookPayload) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given GithubUser and assigns it to the Sender field.
func (o *GithubWebHookPayload) SetSender(v GithubUser) {
	o.Sender = &v
}

func (o GithubWebHookPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubWebHookPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.After) {
		toSerialize["after"] = o.After
	}
	if !IsNil(o.Before) {
		toSerialize["before"] = o.Before
	}
	if !IsNil(o.Commits) {
		toSerialize["commits"] = o.Commits
	}
	if !IsNil(o.Compare) {
		toSerialize["compare"] = o.Compare
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if !IsNil(o.Forced) {
		toSerialize["forced"] = o.Forced
	}
	if !IsNil(o.HeadCommit) {
		toSerialize["head_commit"] = o.HeadCommit
	}
	if !IsNil(o.Pusher) {
		toSerialize["pusher"] = o.Pusher
	}
	if !IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	return toSerialize, nil
}

type NullableGithubWebHookPayload struct {
	value *GithubWebHookPayload
	isSet bool
}

func (v NullableGithubWebHookPayload) Get() *GithubWebHookPayload {
	return v.value
}

func (v *NullableGithubWebHookPayload) Set(val *GithubWebHookPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubWebHookPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubWebHookPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubWebHookPayload(val *GithubWebHookPayload) *NullableGithubWebHookPayload {
	return &NullableGithubWebHookPayload{value: val, isSet: true}
}

func (v NullableGithubWebHookPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubWebHookPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
