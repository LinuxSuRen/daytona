/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GithubWebHookAuthor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubWebHookAuthor{}

// GithubWebHookAuthor struct for GithubWebHookAuthor
type GithubWebHookAuthor struct {
	Email    *string `json:"email,omitempty"`
	Name     *string `json:"name,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewGithubWebHookAuthor instantiates a new GithubWebHookAuthor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubWebHookAuthor() *GithubWebHookAuthor {
	this := GithubWebHookAuthor{}
	return &this
}

// NewGithubWebHookAuthorWithDefaults instantiates a new GithubWebHookAuthor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubWebHookAuthorWithDefaults() *GithubWebHookAuthor {
	this := GithubWebHookAuthor{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GithubWebHookAuthor) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookAuthor) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GithubWebHookAuthor) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GithubWebHookAuthor) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GithubWebHookAuthor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookAuthor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GithubWebHookAuthor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GithubWebHookAuthor) SetName(v string) {
	o.Name = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *GithubWebHookAuthor) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookAuthor) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *GithubWebHookAuthor) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *GithubWebHookAuthor) SetUsername(v string) {
	o.Username = &v
}

func (o GithubWebHookAuthor) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubWebHookAuthor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableGithubWebHookAuthor struct {
	value *GithubWebHookAuthor
	isSet bool
}

func (v NullableGithubWebHookAuthor) Get() *GithubWebHookAuthor {
	return v.value
}

func (v *NullableGithubWebHookAuthor) Set(val *GithubWebHookAuthor) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubWebHookAuthor) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubWebHookAuthor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubWebHookAuthor(val *GithubWebHookAuthor) *NullableGithubWebHookAuthor {
	return &NullableGithubWebHookAuthor{value: val, isSet: true}
}

func (v NullableGithubWebHookAuthor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubWebHookAuthor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
