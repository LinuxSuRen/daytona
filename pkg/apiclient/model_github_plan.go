/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GithubPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubPlan{}

// GithubPlan struct for GithubPlan
type GithubPlan struct {
	Collaborators *int32  `json:"collaborators,omitempty"`
	Name          *string `json:"name,omitempty"`
	PrivateRepos  *int32  `json:"private_repos,omitempty"`
	Space         *int32  `json:"space,omitempty"`
}

// NewGithubPlan instantiates a new GithubPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubPlan() *GithubPlan {
	this := GithubPlan{}
	return &this
}

// NewGithubPlanWithDefaults instantiates a new GithubPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubPlanWithDefaults() *GithubPlan {
	this := GithubPlan{}
	return &this
}

// GetCollaborators returns the Collaborators field value if set, zero value otherwise.
func (o *GithubPlan) GetCollaborators() int32 {
	if o == nil || IsNil(o.Collaborators) {
		var ret int32
		return ret
	}
	return *o.Collaborators
}

// GetCollaboratorsOk returns a tuple with the Collaborators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubPlan) GetCollaboratorsOk() (*int32, bool) {
	if o == nil || IsNil(o.Collaborators) {
		return nil, false
	}
	return o.Collaborators, true
}

// HasCollaborators returns a boolean if a field has been set.
func (o *GithubPlan) HasCollaborators() bool {
	if o != nil && !IsNil(o.Collaborators) {
		return true
	}

	return false
}

// SetCollaborators gets a reference to the given int32 and assigns it to the Collaborators field.
func (o *GithubPlan) SetCollaborators(v int32) {
	o.Collaborators = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GithubPlan) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubPlan) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GithubPlan) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GithubPlan) SetName(v string) {
	o.Name = &v
}

// GetPrivateRepos returns the PrivateRepos field value if set, zero value otherwise.
func (o *GithubPlan) GetPrivateRepos() int32 {
	if o == nil || IsNil(o.PrivateRepos) {
		var ret int32
		return ret
	}
	return *o.PrivateRepos
}

// GetPrivateReposOk returns a tuple with the PrivateRepos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubPlan) GetPrivateReposOk() (*int32, bool) {
	if o == nil || IsNil(o.PrivateRepos) {
		return nil, false
	}
	return o.PrivateRepos, true
}

// HasPrivateRepos returns a boolean if a field has been set.
func (o *GithubPlan) HasPrivateRepos() bool {
	if o != nil && !IsNil(o.PrivateRepos) {
		return true
	}

	return false
}

// SetPrivateRepos gets a reference to the given int32 and assigns it to the PrivateRepos field.
func (o *GithubPlan) SetPrivateRepos(v int32) {
	o.PrivateRepos = &v
}

// GetSpace returns the Space field value if set, zero value otherwise.
func (o *GithubPlan) GetSpace() int32 {
	if o == nil || IsNil(o.Space) {
		var ret int32
		return ret
	}
	return *o.Space
}

// GetSpaceOk returns a tuple with the Space field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubPlan) GetSpaceOk() (*int32, bool) {
	if o == nil || IsNil(o.Space) {
		return nil, false
	}
	return o.Space, true
}

// HasSpace returns a boolean if a field has been set.
func (o *GithubPlan) HasSpace() bool {
	if o != nil && !IsNil(o.Space) {
		return true
	}

	return false
}

// SetSpace gets a reference to the given int32 and assigns it to the Space field.
func (o *GithubPlan) SetSpace(v int32) {
	o.Space = &v
}

func (o GithubPlan) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Collaborators) {
		toSerialize["collaborators"] = o.Collaborators
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.PrivateRepos) {
		toSerialize["private_repos"] = o.PrivateRepos
	}
	if !IsNil(o.Space) {
		toSerialize["space"] = o.Space
	}
	return toSerialize, nil
}

type NullableGithubPlan struct {
	value *GithubPlan
	isSet bool
}

func (v NullableGithubPlan) Get() *GithubPlan {
	return v.value
}

func (v *NullableGithubPlan) Set(val *GithubPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubPlan(val *GithubPlan) *NullableGithubPlan {
	return &NullableGithubPlan{value: val, isSet: true}
}

func (v NullableGithubPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
