/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GithubTimestamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubTimestamp{}

// GithubTimestamp struct for GithubTimestamp
type GithubTimestamp struct {
	TimeTime *string `json:"time.Time,omitempty"`
}

// NewGithubTimestamp instantiates a new GithubTimestamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubTimestamp() *GithubTimestamp {
	this := GithubTimestamp{}
	return &this
}

// NewGithubTimestampWithDefaults instantiates a new GithubTimestamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubTimestampWithDefaults() *GithubTimestamp {
	this := GithubTimestamp{}
	return &this
}

// GetTimeTime returns the TimeTime field value if set, zero value otherwise.
func (o *GithubTimestamp) GetTimeTime() string {
	if o == nil || IsNil(o.TimeTime) {
		var ret string
		return ret
	}
	return *o.TimeTime
}

// GetTimeTimeOk returns a tuple with the TimeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubTimestamp) GetTimeTimeOk() (*string, bool) {
	if o == nil || IsNil(o.TimeTime) {
		return nil, false
	}
	return o.TimeTime, true
}

// HasTimeTime returns a boolean if a field has been set.
func (o *GithubTimestamp) HasTimeTime() bool {
	if o != nil && !IsNil(o.TimeTime) {
		return true
	}

	return false
}

// SetTimeTime gets a reference to the given string and assigns it to the TimeTime field.
func (o *GithubTimestamp) SetTimeTime(v string) {
	o.TimeTime = &v
}

func (o GithubTimestamp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubTimestamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeTime) {
		toSerialize["time.Time"] = o.TimeTime
	}
	return toSerialize, nil
}

type NullableGithubTimestamp struct {
	value *GithubTimestamp
	isSet bool
}

func (v NullableGithubTimestamp) Get() *GithubTimestamp {
	return v.value
}

func (v *NullableGithubTimestamp) Set(val *GithubTimestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubTimestamp(val *GithubTimestamp) *NullableGithubTimestamp {
	return &NullableGithubTimestamp{value: val, isSet: true}
}

func (v NullableGithubTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
