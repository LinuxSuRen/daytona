/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GithubWebHookCommit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubWebHookCommit{}

// GithubWebHookCommit struct for GithubWebHookCommit
type GithubWebHookCommit struct {
	Added     []string             `json:"added,omitempty"`
	Author    *GithubWebHookAuthor `json:"author,omitempty"`
	Committer *GithubWebHookAuthor `json:"committer,omitempty"`
	Distinct  *bool                `json:"distinct,omitempty"`
	Id        *string              `json:"id,omitempty"`
	Message   *string              `json:"message,omitempty"`
	Modified  []string             `json:"modified,omitempty"`
	Removed   []string             `json:"removed,omitempty"`
	Timestamp *string              `json:"timestamp,omitempty"`
}

// NewGithubWebHookCommit instantiates a new GithubWebHookCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubWebHookCommit() *GithubWebHookCommit {
	this := GithubWebHookCommit{}
	return &this
}

// NewGithubWebHookCommitWithDefaults instantiates a new GithubWebHookCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubWebHookCommitWithDefaults() *GithubWebHookCommit {
	this := GithubWebHookCommit{}
	return &this
}

// GetAdded returns the Added field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetAdded() []string {
	if o == nil || IsNil(o.Added) {
		var ret []string
		return ret
	}
	return o.Added
}

// GetAddedOk returns a tuple with the Added field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetAddedOk() ([]string, bool) {
	if o == nil || IsNil(o.Added) {
		return nil, false
	}
	return o.Added, true
}

// HasAdded returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasAdded() bool {
	if o != nil && !IsNil(o.Added) {
		return true
	}

	return false
}

// SetAdded gets a reference to the given []string and assigns it to the Added field.
func (o *GithubWebHookCommit) SetAdded(v []string) {
	o.Added = v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetAuthor() GithubWebHookAuthor {
	if o == nil || IsNil(o.Author) {
		var ret GithubWebHookAuthor
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetAuthorOk() (*GithubWebHookAuthor, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given GithubWebHookAuthor and assigns it to the Author field.
func (o *GithubWebHookCommit) SetAuthor(v GithubWebHookAuthor) {
	o.Author = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetCommitter() GithubWebHookAuthor {
	if o == nil || IsNil(o.Committer) {
		var ret GithubWebHookAuthor
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetCommitterOk() (*GithubWebHookAuthor, bool) {
	if o == nil || IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasCommitter() bool {
	if o != nil && !IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given GithubWebHookAuthor and assigns it to the Committer field.
func (o *GithubWebHookCommit) SetCommitter(v GithubWebHookAuthor) {
	o.Committer = &v
}

// GetDistinct returns the Distinct field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetDistinct() bool {
	if o == nil || IsNil(o.Distinct) {
		var ret bool
		return ret
	}
	return *o.Distinct
}

// GetDistinctOk returns a tuple with the Distinct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetDistinctOk() (*bool, bool) {
	if o == nil || IsNil(o.Distinct) {
		return nil, false
	}
	return o.Distinct, true
}

// HasDistinct returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasDistinct() bool {
	if o != nil && !IsNil(o.Distinct) {
		return true
	}

	return false
}

// SetDistinct gets a reference to the given bool and assigns it to the Distinct field.
func (o *GithubWebHookCommit) SetDistinct(v bool) {
	o.Distinct = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *GithubWebHookCommit) SetId(v string) {
	o.Id = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *GithubWebHookCommit) SetMessage(v string) {
	o.Message = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetModified() []string {
	if o == nil || IsNil(o.Modified) {
		var ret []string
		return ret
	}
	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetModifiedOk() ([]string, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given []string and assigns it to the Modified field.
func (o *GithubWebHookCommit) SetModified(v []string) {
	o.Modified = v
}

// GetRemoved returns the Removed field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetRemoved() []string {
	if o == nil || IsNil(o.Removed) {
		var ret []string
		return ret
	}
	return o.Removed
}

// GetRemovedOk returns a tuple with the Removed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetRemovedOk() ([]string, bool) {
	if o == nil || IsNil(o.Removed) {
		return nil, false
	}
	return o.Removed, true
}

// HasRemoved returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasRemoved() bool {
	if o != nil && !IsNil(o.Removed) {
		return true
	}

	return false
}

// SetRemoved gets a reference to the given []string and assigns it to the Removed field.
func (o *GithubWebHookCommit) SetRemoved(v []string) {
	o.Removed = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *GithubWebHookCommit) GetTimestamp() string {
	if o == nil || IsNil(o.Timestamp) {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubWebHookCommit) GetTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *GithubWebHookCommit) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *GithubWebHookCommit) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o GithubWebHookCommit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubWebHookCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Added) {
		toSerialize["added"] = o.Added
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Committer) {
		toSerialize["committer"] = o.Committer
	}
	if !IsNil(o.Distinct) {
		toSerialize["distinct"] = o.Distinct
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	if !IsNil(o.Removed) {
		toSerialize["removed"] = o.Removed
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableGithubWebHookCommit struct {
	value *GithubWebHookCommit
	isSet bool
}

func (v NullableGithubWebHookCommit) Get() *GithubWebHookCommit {
	return v.value
}

func (v *NullableGithubWebHookCommit) Set(val *GithubWebHookCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubWebHookCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubWebHookCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubWebHookCommit(val *GithubWebHookCommit) *NullableGithubWebHookCommit {
	return &NullableGithubWebHookCommit{value: val, isSet: true}
}

func (v NullableGithubWebHookCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubWebHookCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
