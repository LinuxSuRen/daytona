/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GithubUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubUser{}

// GithubUser struct for GithubUser
type GithubUser struct {
	AvatarUrl         *string          `json:"avatar_url,omitempty"`
	Bio               *string          `json:"bio,omitempty"`
	Blog              *string          `json:"blog,omitempty"`
	Collaborators     *int32           `json:"collaborators,omitempty"`
	Company           *string          `json:"company,omitempty"`
	CreatedAt         *GithubTimestamp `json:"created_at,omitempty"`
	DiskUsage         *int32           `json:"disk_usage,omitempty"`
	Email             *string          `json:"email,omitempty"`
	EventsUrl         *string          `json:"events_url,omitempty"`
	Followers         *int32           `json:"followers,omitempty"`
	FollowersUrl      *string          `json:"followers_url,omitempty"`
	Following         *int32           `json:"following,omitempty"`
	FollowingUrl      *string          `json:"following_url,omitempty"`
	GistsUrl          *string          `json:"gists_url,omitempty"`
	GravatarId        *string          `json:"gravatar_id,omitempty"`
	Hireable          *bool            `json:"hireable,omitempty"`
	HtmlUrl           *string          `json:"html_url,omitempty"`
	Id                *int32           `json:"id,omitempty"`
	Location          *string          `json:"location,omitempty"`
	Login             *string          `json:"login,omitempty"`
	Name              *string          `json:"name,omitempty"`
	NodeId            *string          `json:"node_id,omitempty"`
	OrganizationsUrl  *string          `json:"organizations_url,omitempty"`
	OwnedPrivateRepos *int32           `json:"owned_private_repos,omitempty"`
	// Permissions identifies the permissions that a user has on a given repository. This is only populated when calling Repositories.ListCollaborators.
	Permissions       *map[string]bool `json:"permissions,omitempty"`
	Plan              *GithubPlan      `json:"plan,omitempty"`
	PrivateGists      *int32           `json:"private_gists,omitempty"`
	PublicGists       *int32           `json:"public_gists,omitempty"`
	PublicRepos       *int32           `json:"public_repos,omitempty"`
	ReceivedEventsUrl *string          `json:"received_events_url,omitempty"`
	ReposUrl          *string          `json:"repos_url,omitempty"`
	SiteAdmin         *bool            `json:"site_admin,omitempty"`
	StarredUrl        *string          `json:"starred_url,omitempty"`
	SubscriptionsUrl  *string          `json:"subscriptions_url,omitempty"`
	SuspendedAt       *GithubTimestamp `json:"suspended_at,omitempty"`
	// TextMatches is only populated from search results that request text matches See: search.go and https://developer.github.com/v3/search/#text-match-metadata
	TextMatches       []GithubTextMatch `json:"text_matches,omitempty"`
	TotalPrivateRepos *int32            `json:"total_private_repos,omitempty"`
	Type              *string           `json:"type,omitempty"`
	UpdatedAt         *GithubTimestamp  `json:"updated_at,omitempty"`
	// API URLs
	Url *string `json:"url,omitempty"`
}

// NewGithubUser instantiates a new GithubUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubUser() *GithubUser {
	this := GithubUser{}
	return &this
}

// NewGithubUserWithDefaults instantiates a new GithubUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubUserWithDefaults() *GithubUser {
	this := GithubUser{}
	return &this
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *GithubUser) GetAvatarUrl() string {
	if o == nil || IsNil(o.AvatarUrl) {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetAvatarUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AvatarUrl) {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *GithubUser) HasAvatarUrl() bool {
	if o != nil && !IsNil(o.AvatarUrl) {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *GithubUser) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *GithubUser) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *GithubUser) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *GithubUser) SetBio(v string) {
	o.Bio = &v
}

// GetBlog returns the Blog field value if set, zero value otherwise.
func (o *GithubUser) GetBlog() string {
	if o == nil || IsNil(o.Blog) {
		var ret string
		return ret
	}
	return *o.Blog
}

// GetBlogOk returns a tuple with the Blog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetBlogOk() (*string, bool) {
	if o == nil || IsNil(o.Blog) {
		return nil, false
	}
	return o.Blog, true
}

// HasBlog returns a boolean if a field has been set.
func (o *GithubUser) HasBlog() bool {
	if o != nil && !IsNil(o.Blog) {
		return true
	}

	return false
}

// SetBlog gets a reference to the given string and assigns it to the Blog field.
func (o *GithubUser) SetBlog(v string) {
	o.Blog = &v
}

// GetCollaborators returns the Collaborators field value if set, zero value otherwise.
func (o *GithubUser) GetCollaborators() int32 {
	if o == nil || IsNil(o.Collaborators) {
		var ret int32
		return ret
	}
	return *o.Collaborators
}

// GetCollaboratorsOk returns a tuple with the Collaborators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetCollaboratorsOk() (*int32, bool) {
	if o == nil || IsNil(o.Collaborators) {
		return nil, false
	}
	return o.Collaborators, true
}

// HasCollaborators returns a boolean if a field has been set.
func (o *GithubUser) HasCollaborators() bool {
	if o != nil && !IsNil(o.Collaborators) {
		return true
	}

	return false
}

// SetCollaborators gets a reference to the given int32 and assigns it to the Collaborators field.
func (o *GithubUser) SetCollaborators(v int32) {
	o.Collaborators = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GithubUser) GetCompany() string {
	if o == nil || IsNil(o.Company) {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetCompanyOk() (*string, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GithubUser) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *GithubUser) SetCompany(v string) {
	o.Company = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GithubUser) GetCreatedAt() GithubTimestamp {
	if o == nil || IsNil(o.CreatedAt) {
		var ret GithubTimestamp
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetCreatedAtOk() (*GithubTimestamp, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GithubUser) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given GithubTimestamp and assigns it to the CreatedAt field.
func (o *GithubUser) SetCreatedAt(v GithubTimestamp) {
	o.CreatedAt = &v
}

// GetDiskUsage returns the DiskUsage field value if set, zero value otherwise.
func (o *GithubUser) GetDiskUsage() int32 {
	if o == nil || IsNil(o.DiskUsage) {
		var ret int32
		return ret
	}
	return *o.DiskUsage
}

// GetDiskUsageOk returns a tuple with the DiskUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetDiskUsageOk() (*int32, bool) {
	if o == nil || IsNil(o.DiskUsage) {
		return nil, false
	}
	return o.DiskUsage, true
}

// HasDiskUsage returns a boolean if a field has been set.
func (o *GithubUser) HasDiskUsage() bool {
	if o != nil && !IsNil(o.DiskUsage) {
		return true
	}

	return false
}

// SetDiskUsage gets a reference to the given int32 and assigns it to the DiskUsage field.
func (o *GithubUser) SetDiskUsage(v int32) {
	o.DiskUsage = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GithubUser) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GithubUser) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GithubUser) SetEmail(v string) {
	o.Email = &v
}

// GetEventsUrl returns the EventsUrl field value if set, zero value otherwise.
func (o *GithubUser) GetEventsUrl() string {
	if o == nil || IsNil(o.EventsUrl) {
		var ret string
		return ret
	}
	return *o.EventsUrl
}

// GetEventsUrlOk returns a tuple with the EventsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetEventsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EventsUrl) {
		return nil, false
	}
	return o.EventsUrl, true
}

// HasEventsUrl returns a boolean if a field has been set.
func (o *GithubUser) HasEventsUrl() bool {
	if o != nil && !IsNil(o.EventsUrl) {
		return true
	}

	return false
}

// SetEventsUrl gets a reference to the given string and assigns it to the EventsUrl field.
func (o *GithubUser) SetEventsUrl(v string) {
	o.EventsUrl = &v
}

// GetFollowers returns the Followers field value if set, zero value otherwise.
func (o *GithubUser) GetFollowers() int32 {
	if o == nil || IsNil(o.Followers) {
		var ret int32
		return ret
	}
	return *o.Followers
}

// GetFollowersOk returns a tuple with the Followers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetFollowersOk() (*int32, bool) {
	if o == nil || IsNil(o.Followers) {
		return nil, false
	}
	return o.Followers, true
}

// HasFollowers returns a boolean if a field has been set.
func (o *GithubUser) HasFollowers() bool {
	if o != nil && !IsNil(o.Followers) {
		return true
	}

	return false
}

// SetFollowers gets a reference to the given int32 and assigns it to the Followers field.
func (o *GithubUser) SetFollowers(v int32) {
	o.Followers = &v
}

// GetFollowersUrl returns the FollowersUrl field value if set, zero value otherwise.
func (o *GithubUser) GetFollowersUrl() string {
	if o == nil || IsNil(o.FollowersUrl) {
		var ret string
		return ret
	}
	return *o.FollowersUrl
}

// GetFollowersUrlOk returns a tuple with the FollowersUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetFollowersUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FollowersUrl) {
		return nil, false
	}
	return o.FollowersUrl, true
}

// HasFollowersUrl returns a boolean if a field has been set.
func (o *GithubUser) HasFollowersUrl() bool {
	if o != nil && !IsNil(o.FollowersUrl) {
		return true
	}

	return false
}

// SetFollowersUrl gets a reference to the given string and assigns it to the FollowersUrl field.
func (o *GithubUser) SetFollowersUrl(v string) {
	o.FollowersUrl = &v
}

// GetFollowing returns the Following field value if set, zero value otherwise.
func (o *GithubUser) GetFollowing() int32 {
	if o == nil || IsNil(o.Following) {
		var ret int32
		return ret
	}
	return *o.Following
}

// GetFollowingOk returns a tuple with the Following field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetFollowingOk() (*int32, bool) {
	if o == nil || IsNil(o.Following) {
		return nil, false
	}
	return o.Following, true
}

// HasFollowing returns a boolean if a field has been set.
func (o *GithubUser) HasFollowing() bool {
	if o != nil && !IsNil(o.Following) {
		return true
	}

	return false
}

// SetFollowing gets a reference to the given int32 and assigns it to the Following field.
func (o *GithubUser) SetFollowing(v int32) {
	o.Following = &v
}

// GetFollowingUrl returns the FollowingUrl field value if set, zero value otherwise.
func (o *GithubUser) GetFollowingUrl() string {
	if o == nil || IsNil(o.FollowingUrl) {
		var ret string
		return ret
	}
	return *o.FollowingUrl
}

// GetFollowingUrlOk returns a tuple with the FollowingUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetFollowingUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FollowingUrl) {
		return nil, false
	}
	return o.FollowingUrl, true
}

// HasFollowingUrl returns a boolean if a field has been set.
func (o *GithubUser) HasFollowingUrl() bool {
	if o != nil && !IsNil(o.FollowingUrl) {
		return true
	}

	return false
}

// SetFollowingUrl gets a reference to the given string and assigns it to the FollowingUrl field.
func (o *GithubUser) SetFollowingUrl(v string) {
	o.FollowingUrl = &v
}

// GetGistsUrl returns the GistsUrl field value if set, zero value otherwise.
func (o *GithubUser) GetGistsUrl() string {
	if o == nil || IsNil(o.GistsUrl) {
		var ret string
		return ret
	}
	return *o.GistsUrl
}

// GetGistsUrlOk returns a tuple with the GistsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetGistsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GistsUrl) {
		return nil, false
	}
	return o.GistsUrl, true
}

// HasGistsUrl returns a boolean if a field has been set.
func (o *GithubUser) HasGistsUrl() bool {
	if o != nil && !IsNil(o.GistsUrl) {
		return true
	}

	return false
}

// SetGistsUrl gets a reference to the given string and assigns it to the GistsUrl field.
func (o *GithubUser) SetGistsUrl(v string) {
	o.GistsUrl = &v
}

// GetGravatarId returns the GravatarId field value if set, zero value otherwise.
func (o *GithubUser) GetGravatarId() string {
	if o == nil || IsNil(o.GravatarId) {
		var ret string
		return ret
	}
	return *o.GravatarId
}

// GetGravatarIdOk returns a tuple with the GravatarId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetGravatarIdOk() (*string, bool) {
	if o == nil || IsNil(o.GravatarId) {
		return nil, false
	}
	return o.GravatarId, true
}

// HasGravatarId returns a boolean if a field has been set.
func (o *GithubUser) HasGravatarId() bool {
	if o != nil && !IsNil(o.GravatarId) {
		return true
	}

	return false
}

// SetGravatarId gets a reference to the given string and assigns it to the GravatarId field.
func (o *GithubUser) SetGravatarId(v string) {
	o.GravatarId = &v
}

// GetHireable returns the Hireable field value if set, zero value otherwise.
func (o *GithubUser) GetHireable() bool {
	if o == nil || IsNil(o.Hireable) {
		var ret bool
		return ret
	}
	return *o.Hireable
}

// GetHireableOk returns a tuple with the Hireable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetHireableOk() (*bool, bool) {
	if o == nil || IsNil(o.Hireable) {
		return nil, false
	}
	return o.Hireable, true
}

// HasHireable returns a boolean if a field has been set.
func (o *GithubUser) HasHireable() bool {
	if o != nil && !IsNil(o.Hireable) {
		return true
	}

	return false
}

// SetHireable gets a reference to the given bool and assigns it to the Hireable field.
func (o *GithubUser) SetHireable(v bool) {
	o.Hireable = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *GithubUser) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *GithubUser) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *GithubUser) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GithubUser) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GithubUser) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GithubUser) SetId(v int32) {
	o.Id = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *GithubUser) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *GithubUser) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *GithubUser) SetLocation(v string) {
	o.Location = &v
}

// GetLogin returns the Login field value if set, zero value otherwise.
func (o *GithubUser) GetLogin() string {
	if o == nil || IsNil(o.Login) {
		var ret string
		return ret
	}
	return *o.Login
}

// GetLoginOk returns a tuple with the Login field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Login) {
		return nil, false
	}
	return o.Login, true
}

// HasLogin returns a boolean if a field has been set.
func (o *GithubUser) HasLogin() bool {
	if o != nil && !IsNil(o.Login) {
		return true
	}

	return false
}

// SetLogin gets a reference to the given string and assigns it to the Login field.
func (o *GithubUser) SetLogin(v string) {
	o.Login = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GithubUser) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GithubUser) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GithubUser) SetName(v string) {
	o.Name = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *GithubUser) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *GithubUser) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *GithubUser) SetNodeId(v string) {
	o.NodeId = &v
}

// GetOrganizationsUrl returns the OrganizationsUrl field value if set, zero value otherwise.
func (o *GithubUser) GetOrganizationsUrl() string {
	if o == nil || IsNil(o.OrganizationsUrl) {
		var ret string
		return ret
	}
	return *o.OrganizationsUrl
}

// GetOrganizationsUrlOk returns a tuple with the OrganizationsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetOrganizationsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationsUrl) {
		return nil, false
	}
	return o.OrganizationsUrl, true
}

// HasOrganizationsUrl returns a boolean if a field has been set.
func (o *GithubUser) HasOrganizationsUrl() bool {
	if o != nil && !IsNil(o.OrganizationsUrl) {
		return true
	}

	return false
}

// SetOrganizationsUrl gets a reference to the given string and assigns it to the OrganizationsUrl field.
func (o *GithubUser) SetOrganizationsUrl(v string) {
	o.OrganizationsUrl = &v
}

// GetOwnedPrivateRepos returns the OwnedPrivateRepos field value if set, zero value otherwise.
func (o *GithubUser) GetOwnedPrivateRepos() int32 {
	if o == nil || IsNil(o.OwnedPrivateRepos) {
		var ret int32
		return ret
	}
	return *o.OwnedPrivateRepos
}

// GetOwnedPrivateReposOk returns a tuple with the OwnedPrivateRepos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetOwnedPrivateReposOk() (*int32, bool) {
	if o == nil || IsNil(o.OwnedPrivateRepos) {
		return nil, false
	}
	return o.OwnedPrivateRepos, true
}

// HasOwnedPrivateRepos returns a boolean if a field has been set.
func (o *GithubUser) HasOwnedPrivateRepos() bool {
	if o != nil && !IsNil(o.OwnedPrivateRepos) {
		return true
	}

	return false
}

// SetOwnedPrivateRepos gets a reference to the given int32 and assigns it to the OwnedPrivateRepos field.
func (o *GithubUser) SetOwnedPrivateRepos(v int32) {
	o.OwnedPrivateRepos = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *GithubUser) GetPermissions() map[string]bool {
	if o == nil || IsNil(o.Permissions) {
		var ret map[string]bool
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetPermissionsOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *GithubUser) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given map[string]bool and assigns it to the Permissions field.
func (o *GithubUser) SetPermissions(v map[string]bool) {
	o.Permissions = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *GithubUser) GetPlan() GithubPlan {
	if o == nil || IsNil(o.Plan) {
		var ret GithubPlan
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetPlanOk() (*GithubPlan, bool) {
	if o == nil || IsNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *GithubUser) HasPlan() bool {
	if o != nil && !IsNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given GithubPlan and assigns it to the Plan field.
func (o *GithubUser) SetPlan(v GithubPlan) {
	o.Plan = &v
}

// GetPrivateGists returns the PrivateGists field value if set, zero value otherwise.
func (o *GithubUser) GetPrivateGists() int32 {
	if o == nil || IsNil(o.PrivateGists) {
		var ret int32
		return ret
	}
	return *o.PrivateGists
}

// GetPrivateGistsOk returns a tuple with the PrivateGists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetPrivateGistsOk() (*int32, bool) {
	if o == nil || IsNil(o.PrivateGists) {
		return nil, false
	}
	return o.PrivateGists, true
}

// HasPrivateGists returns a boolean if a field has been set.
func (o *GithubUser) HasPrivateGists() bool {
	if o != nil && !IsNil(o.PrivateGists) {
		return true
	}

	return false
}

// SetPrivateGists gets a reference to the given int32 and assigns it to the PrivateGists field.
func (o *GithubUser) SetPrivateGists(v int32) {
	o.PrivateGists = &v
}

// GetPublicGists returns the PublicGists field value if set, zero value otherwise.
func (o *GithubUser) GetPublicGists() int32 {
	if o == nil || IsNil(o.PublicGists) {
		var ret int32
		return ret
	}
	return *o.PublicGists
}

// GetPublicGistsOk returns a tuple with the PublicGists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetPublicGistsOk() (*int32, bool) {
	if o == nil || IsNil(o.PublicGists) {
		return nil, false
	}
	return o.PublicGists, true
}

// HasPublicGists returns a boolean if a field has been set.
func (o *GithubUser) HasPublicGists() bool {
	if o != nil && !IsNil(o.PublicGists) {
		return true
	}

	return false
}

// SetPublicGists gets a reference to the given int32 and assigns it to the PublicGists field.
func (o *GithubUser) SetPublicGists(v int32) {
	o.PublicGists = &v
}

// GetPublicRepos returns the PublicRepos field value if set, zero value otherwise.
func (o *GithubUser) GetPublicRepos() int32 {
	if o == nil || IsNil(o.PublicRepos) {
		var ret int32
		return ret
	}
	return *o.PublicRepos
}

// GetPublicReposOk returns a tuple with the PublicRepos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetPublicReposOk() (*int32, bool) {
	if o == nil || IsNil(o.PublicRepos) {
		return nil, false
	}
	return o.PublicRepos, true
}

// HasPublicRepos returns a boolean if a field has been set.
func (o *GithubUser) HasPublicRepos() bool {
	if o != nil && !IsNil(o.PublicRepos) {
		return true
	}

	return false
}

// SetPublicRepos gets a reference to the given int32 and assigns it to the PublicRepos field.
func (o *GithubUser) SetPublicRepos(v int32) {
	o.PublicRepos = &v
}

// GetReceivedEventsUrl returns the ReceivedEventsUrl field value if set, zero value otherwise.
func (o *GithubUser) GetReceivedEventsUrl() string {
	if o == nil || IsNil(o.ReceivedEventsUrl) {
		var ret string
		return ret
	}
	return *o.ReceivedEventsUrl
}

// GetReceivedEventsUrlOk returns a tuple with the ReceivedEventsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetReceivedEventsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReceivedEventsUrl) {
		return nil, false
	}
	return o.ReceivedEventsUrl, true
}

// HasReceivedEventsUrl returns a boolean if a field has been set.
func (o *GithubUser) HasReceivedEventsUrl() bool {
	if o != nil && !IsNil(o.ReceivedEventsUrl) {
		return true
	}

	return false
}

// SetReceivedEventsUrl gets a reference to the given string and assigns it to the ReceivedEventsUrl field.
func (o *GithubUser) SetReceivedEventsUrl(v string) {
	o.ReceivedEventsUrl = &v
}

// GetReposUrl returns the ReposUrl field value if set, zero value otherwise.
func (o *GithubUser) GetReposUrl() string {
	if o == nil || IsNil(o.ReposUrl) {
		var ret string
		return ret
	}
	return *o.ReposUrl
}

// GetReposUrlOk returns a tuple with the ReposUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetReposUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReposUrl) {
		return nil, false
	}
	return o.ReposUrl, true
}

// HasReposUrl returns a boolean if a field has been set.
func (o *GithubUser) HasReposUrl() bool {
	if o != nil && !IsNil(o.ReposUrl) {
		return true
	}

	return false
}

// SetReposUrl gets a reference to the given string and assigns it to the ReposUrl field.
func (o *GithubUser) SetReposUrl(v string) {
	o.ReposUrl = &v
}

// GetSiteAdmin returns the SiteAdmin field value if set, zero value otherwise.
func (o *GithubUser) GetSiteAdmin() bool {
	if o == nil || IsNil(o.SiteAdmin) {
		var ret bool
		return ret
	}
	return *o.SiteAdmin
}

// GetSiteAdminOk returns a tuple with the SiteAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetSiteAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.SiteAdmin) {
		return nil, false
	}
	return o.SiteAdmin, true
}

// HasSiteAdmin returns a boolean if a field has been set.
func (o *GithubUser) HasSiteAdmin() bool {
	if o != nil && !IsNil(o.SiteAdmin) {
		return true
	}

	return false
}

// SetSiteAdmin gets a reference to the given bool and assigns it to the SiteAdmin field.
func (o *GithubUser) SetSiteAdmin(v bool) {
	o.SiteAdmin = &v
}

// GetStarredUrl returns the StarredUrl field value if set, zero value otherwise.
func (o *GithubUser) GetStarredUrl() string {
	if o == nil || IsNil(o.StarredUrl) {
		var ret string
		return ret
	}
	return *o.StarredUrl
}

// GetStarredUrlOk returns a tuple with the StarredUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetStarredUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StarredUrl) {
		return nil, false
	}
	return o.StarredUrl, true
}

// HasStarredUrl returns a boolean if a field has been set.
func (o *GithubUser) HasStarredUrl() bool {
	if o != nil && !IsNil(o.StarredUrl) {
		return true
	}

	return false
}

// SetStarredUrl gets a reference to the given string and assigns it to the StarredUrl field.
func (o *GithubUser) SetStarredUrl(v string) {
	o.StarredUrl = &v
}

// GetSubscriptionsUrl returns the SubscriptionsUrl field value if set, zero value otherwise.
func (o *GithubUser) GetSubscriptionsUrl() string {
	if o == nil || IsNil(o.SubscriptionsUrl) {
		var ret string
		return ret
	}
	return *o.SubscriptionsUrl
}

// GetSubscriptionsUrlOk returns a tuple with the SubscriptionsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetSubscriptionsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionsUrl) {
		return nil, false
	}
	return o.SubscriptionsUrl, true
}

// HasSubscriptionsUrl returns a boolean if a field has been set.
func (o *GithubUser) HasSubscriptionsUrl() bool {
	if o != nil && !IsNil(o.SubscriptionsUrl) {
		return true
	}

	return false
}

// SetSubscriptionsUrl gets a reference to the given string and assigns it to the SubscriptionsUrl field.
func (o *GithubUser) SetSubscriptionsUrl(v string) {
	o.SubscriptionsUrl = &v
}

// GetSuspendedAt returns the SuspendedAt field value if set, zero value otherwise.
func (o *GithubUser) GetSuspendedAt() GithubTimestamp {
	if o == nil || IsNil(o.SuspendedAt) {
		var ret GithubTimestamp
		return ret
	}
	return *o.SuspendedAt
}

// GetSuspendedAtOk returns a tuple with the SuspendedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetSuspendedAtOk() (*GithubTimestamp, bool) {
	if o == nil || IsNil(o.SuspendedAt) {
		return nil, false
	}
	return o.SuspendedAt, true
}

// HasSuspendedAt returns a boolean if a field has been set.
func (o *GithubUser) HasSuspendedAt() bool {
	if o != nil && !IsNil(o.SuspendedAt) {
		return true
	}

	return false
}

// SetSuspendedAt gets a reference to the given GithubTimestamp and assigns it to the SuspendedAt field.
func (o *GithubUser) SetSuspendedAt(v GithubTimestamp) {
	o.SuspendedAt = &v
}

// GetTextMatches returns the TextMatches field value if set, zero value otherwise.
func (o *GithubUser) GetTextMatches() []GithubTextMatch {
	if o == nil || IsNil(o.TextMatches) {
		var ret []GithubTextMatch
		return ret
	}
	return o.TextMatches
}

// GetTextMatchesOk returns a tuple with the TextMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetTextMatchesOk() ([]GithubTextMatch, bool) {
	if o == nil || IsNil(o.TextMatches) {
		return nil, false
	}
	return o.TextMatches, true
}

// HasTextMatches returns a boolean if a field has been set.
func (o *GithubUser) HasTextMatches() bool {
	if o != nil && !IsNil(o.TextMatches) {
		return true
	}

	return false
}

// SetTextMatches gets a reference to the given []GithubTextMatch and assigns it to the TextMatches field.
func (o *GithubUser) SetTextMatches(v []GithubTextMatch) {
	o.TextMatches = v
}

// GetTotalPrivateRepos returns the TotalPrivateRepos field value if set, zero value otherwise.
func (o *GithubUser) GetTotalPrivateRepos() int32 {
	if o == nil || IsNil(o.TotalPrivateRepos) {
		var ret int32
		return ret
	}
	return *o.TotalPrivateRepos
}

// GetTotalPrivateReposOk returns a tuple with the TotalPrivateRepos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetTotalPrivateReposOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalPrivateRepos) {
		return nil, false
	}
	return o.TotalPrivateRepos, true
}

// HasTotalPrivateRepos returns a boolean if a field has been set.
func (o *GithubUser) HasTotalPrivateRepos() bool {
	if o != nil && !IsNil(o.TotalPrivateRepos) {
		return true
	}

	return false
}

// SetTotalPrivateRepos gets a reference to the given int32 and assigns it to the TotalPrivateRepos field.
func (o *GithubUser) SetTotalPrivateRepos(v int32) {
	o.TotalPrivateRepos = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GithubUser) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GithubUser) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GithubUser) SetType(v string) {
	o.Type = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GithubUser) GetUpdatedAt() GithubTimestamp {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret GithubTimestamp
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetUpdatedAtOk() (*GithubTimestamp, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GithubUser) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given GithubTimestamp and assigns it to the UpdatedAt field.
func (o *GithubUser) SetUpdatedAt(v GithubTimestamp) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GithubUser) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubUser) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GithubUser) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GithubUser) SetUrl(v string) {
	o.Url = &v
}

func (o GithubUser) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AvatarUrl) {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.Blog) {
		toSerialize["blog"] = o.Blog
	}
	if !IsNil(o.Collaborators) {
		toSerialize["collaborators"] = o.Collaborators
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DiskUsage) {
		toSerialize["disk_usage"] = o.DiskUsage
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.EventsUrl) {
		toSerialize["events_url"] = o.EventsUrl
	}
	if !IsNil(o.Followers) {
		toSerialize["followers"] = o.Followers
	}
	if !IsNil(o.FollowersUrl) {
		toSerialize["followers_url"] = o.FollowersUrl
	}
	if !IsNil(o.Following) {
		toSerialize["following"] = o.Following
	}
	if !IsNil(o.FollowingUrl) {
		toSerialize["following_url"] = o.FollowingUrl
	}
	if !IsNil(o.GistsUrl) {
		toSerialize["gists_url"] = o.GistsUrl
	}
	if !IsNil(o.GravatarId) {
		toSerialize["gravatar_id"] = o.GravatarId
	}
	if !IsNil(o.Hireable) {
		toSerialize["hireable"] = o.Hireable
	}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Login) {
		toSerialize["login"] = o.Login
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.OrganizationsUrl) {
		toSerialize["organizations_url"] = o.OrganizationsUrl
	}
	if !IsNil(o.OwnedPrivateRepos) {
		toSerialize["owned_private_repos"] = o.OwnedPrivateRepos
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !IsNil(o.PrivateGists) {
		toSerialize["private_gists"] = o.PrivateGists
	}
	if !IsNil(o.PublicGists) {
		toSerialize["public_gists"] = o.PublicGists
	}
	if !IsNil(o.PublicRepos) {
		toSerialize["public_repos"] = o.PublicRepos
	}
	if !IsNil(o.ReceivedEventsUrl) {
		toSerialize["received_events_url"] = o.ReceivedEventsUrl
	}
	if !IsNil(o.ReposUrl) {
		toSerialize["repos_url"] = o.ReposUrl
	}
	if !IsNil(o.SiteAdmin) {
		toSerialize["site_admin"] = o.SiteAdmin
	}
	if !IsNil(o.StarredUrl) {
		toSerialize["starred_url"] = o.StarredUrl
	}
	if !IsNil(o.SubscriptionsUrl) {
		toSerialize["subscriptions_url"] = o.SubscriptionsUrl
	}
	if !IsNil(o.SuspendedAt) {
		toSerialize["suspended_at"] = o.SuspendedAt
	}
	if !IsNil(o.TextMatches) {
		toSerialize["text_matches"] = o.TextMatches
	}
	if !IsNil(o.TotalPrivateRepos) {
		toSerialize["total_private_repos"] = o.TotalPrivateRepos
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableGithubUser struct {
	value *GithubUser
	isSet bool
}

func (v NullableGithubUser) Get() *GithubUser {
	return v.value
}

func (v *NullableGithubUser) Set(val *GithubUser) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubUser) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubUser(val *GithubUser) *NullableGithubUser {
	return &NullableGithubUser{value: val, isSet: true}
}

func (v NullableGithubUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
