/*
Daytona Server API

Daytona Server API

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the GithubRepository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubRepository{}

// GithubRepository struct for GithubRepository
type GithubRepository struct {
	AllowMergeCommit  *bool                `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge  *bool                `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge  *bool                `json:"allow_squash_merge,omitempty"`
	ArchiveUrl        *string              `json:"archive_url,omitempty"`
	Archived          *bool                `json:"archived,omitempty"`
	AssigneesUrl      *string              `json:"assignees_url,omitempty"`
	AutoInit          *bool                `json:"auto_init,omitempty"`
	BlobsUrl          *string              `json:"blobs_url,omitempty"`
	BranchesUrl       *string              `json:"branches_url,omitempty"`
	CloneUrl          *string              `json:"clone_url,omitempty"`
	CodeOfConduct     *GithubCodeOfConduct `json:"code_of_conduct,omitempty"`
	CollaboratorsUrl  *string              `json:"collaborators_url,omitempty"`
	CommentsUrl       *string              `json:"comments_url,omitempty"`
	CommitsUrl        *string              `json:"commits_url,omitempty"`
	CompareUrl        *string              `json:"compare_url,omitempty"`
	ContentsUrl       *string              `json:"contents_url,omitempty"`
	ContributorsUrl   *string              `json:"contributors_url,omitempty"`
	CreatedAt         *GithubTimestamp     `json:"created_at,omitempty"`
	DefaultBranch     *string              `json:"default_branch,omitempty"`
	DeploymentsUrl    *string              `json:"deployments_url,omitempty"`
	Description       *string              `json:"description,omitempty"`
	DownloadsUrl      *string              `json:"downloads_url,omitempty"`
	EventsUrl         *string              `json:"events_url,omitempty"`
	Fork              *bool                `json:"fork,omitempty"`
	ForksCount        *int32               `json:"forks_count,omitempty"`
	ForksUrl          *string              `json:"forks_url,omitempty"`
	FullName          *string              `json:"full_name,omitempty"`
	GitCommitsUrl     *string              `json:"git_commits_url,omitempty"`
	GitRefsUrl        *string              `json:"git_refs_url,omitempty"`
	GitTagsUrl        *string              `json:"git_tags_url,omitempty"`
	GitUrl            *string              `json:"git_url,omitempty"`
	GitignoreTemplate *string              `json:"gitignore_template,omitempty"`
	HasDownloads      *bool                `json:"has_downloads,omitempty"`
	HasIssues         *bool                `json:"has_issues,omitempty"`
	HasPages          *bool                `json:"has_pages,omitempty"`
	HasProjects       *bool                `json:"has_projects,omitempty"`
	HasWiki           *bool                `json:"has_wiki,omitempty"`
	Homepage          *string              `json:"homepage,omitempty"`
	HooksUrl          *string              `json:"hooks_url,omitempty"`
	HtmlUrl           *string              `json:"html_url,omitempty"`
	Id                *int32               `json:"id,omitempty"`
	IssueCommentUrl   *string              `json:"issue_comment_url,omitempty"`
	IssueEventsUrl    *string              `json:"issue_events_url,omitempty"`
	IssuesUrl         *string              `json:"issues_url,omitempty"`
	KeysUrl           *string              `json:"keys_url,omitempty"`
	LabelsUrl         *string              `json:"labels_url,omitempty"`
	Language          *string              `json:"language,omitempty"`
	LanguagesUrl      *string              `json:"languages_url,omitempty"`
	// Only provided when using RepositoriesService.Get while in preview
	License          *GithubLicense      `json:"license,omitempty"`
	LicenseTemplate  *string             `json:"license_template,omitempty"`
	MasterBranch     *string             `json:"master_branch,omitempty"`
	MergesUrl        *string             `json:"merges_url,omitempty"`
	MilestonesUrl    *string             `json:"milestones_url,omitempty"`
	MirrorUrl        *string             `json:"mirror_url,omitempty"`
	Name             *string             `json:"name,omitempty"`
	NetworkCount     *int32              `json:"network_count,omitempty"`
	NodeId           *string             `json:"node_id,omitempty"`
	NotificationsUrl *string             `json:"notifications_url,omitempty"`
	OpenIssuesCount  *int32              `json:"open_issues_count,omitempty"`
	Organization     *GithubOrganization `json:"organization,omitempty"`
	Owner            *GithubUser         `json:"owner,omitempty"`
	Parent           *GithubRepository   `json:"parent,omitempty"`
	Permissions      *map[string]bool    `json:"permissions,omitempty"`
	// Additional mutable fields when creating and editing a repository
	Private          *bool             `json:"private,omitempty"`
	PullsUrl         *string           `json:"pulls_url,omitempty"`
	PushedAt         *GithubTimestamp  `json:"pushed_at,omitempty"`
	ReleasesUrl      *string           `json:"releases_url,omitempty"`
	Size             *int32            `json:"size,omitempty"`
	Source           *GithubRepository `json:"source,omitempty"`
	SshUrl           *string           `json:"ssh_url,omitempty"`
	StargazersCount  *int32            `json:"stargazers_count,omitempty"`
	StargazersUrl    *string           `json:"stargazers_url,omitempty"`
	StatusesUrl      *string           `json:"statuses_url,omitempty"`
	SubscribersCount *int32            `json:"subscribers_count,omitempty"`
	SubscribersUrl   *string           `json:"subscribers_url,omitempty"`
	SubscriptionUrl  *string           `json:"subscription_url,omitempty"`
	SvnUrl           *string           `json:"svn_url,omitempty"`
	TagsUrl          *string           `json:"tags_url,omitempty"`
	// Creating an organization repository. Required for non-owners.
	TeamId   *int32  `json:"team_id,omitempty"`
	TeamsUrl *string `json:"teams_url,omitempty"`
	// TextMatches is only populated from search results that request text matches See: search.go and https://developer.github.com/v3/search/#text-match-metadata
	TextMatches []GithubTextMatch `json:"text_matches,omitempty"`
	Topics      []string          `json:"topics,omitempty"`
	TreesUrl    *string           `json:"trees_url,omitempty"`
	UpdatedAt   *GithubTimestamp  `json:"updated_at,omitempty"`
	// API URLs
	Url           *string `json:"url,omitempty"`
	WatchersCount *int32  `json:"watchers_count,omitempty"`
}

// NewGithubRepository instantiates a new GithubRepository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubRepository() *GithubRepository {
	this := GithubRepository{}
	return &this
}

// NewGithubRepositoryWithDefaults instantiates a new GithubRepository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubRepositoryWithDefaults() *GithubRepository {
	this := GithubRepository{}
	return &this
}

// GetAllowMergeCommit returns the AllowMergeCommit field value if set, zero value otherwise.
func (o *GithubRepository) GetAllowMergeCommit() bool {
	if o == nil || IsNil(o.AllowMergeCommit) {
		var ret bool
		return ret
	}
	return *o.AllowMergeCommit
}

// GetAllowMergeCommitOk returns a tuple with the AllowMergeCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetAllowMergeCommitOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowMergeCommit) {
		return nil, false
	}
	return o.AllowMergeCommit, true
}

// HasAllowMergeCommit returns a boolean if a field has been set.
func (o *GithubRepository) HasAllowMergeCommit() bool {
	if o != nil && !IsNil(o.AllowMergeCommit) {
		return true
	}

	return false
}

// SetAllowMergeCommit gets a reference to the given bool and assigns it to the AllowMergeCommit field.
func (o *GithubRepository) SetAllowMergeCommit(v bool) {
	o.AllowMergeCommit = &v
}

// GetAllowRebaseMerge returns the AllowRebaseMerge field value if set, zero value otherwise.
func (o *GithubRepository) GetAllowRebaseMerge() bool {
	if o == nil || IsNil(o.AllowRebaseMerge) {
		var ret bool
		return ret
	}
	return *o.AllowRebaseMerge
}

// GetAllowRebaseMergeOk returns a tuple with the AllowRebaseMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetAllowRebaseMergeOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowRebaseMerge) {
		return nil, false
	}
	return o.AllowRebaseMerge, true
}

// HasAllowRebaseMerge returns a boolean if a field has been set.
func (o *GithubRepository) HasAllowRebaseMerge() bool {
	if o != nil && !IsNil(o.AllowRebaseMerge) {
		return true
	}

	return false
}

// SetAllowRebaseMerge gets a reference to the given bool and assigns it to the AllowRebaseMerge field.
func (o *GithubRepository) SetAllowRebaseMerge(v bool) {
	o.AllowRebaseMerge = &v
}

// GetAllowSquashMerge returns the AllowSquashMerge field value if set, zero value otherwise.
func (o *GithubRepository) GetAllowSquashMerge() bool {
	if o == nil || IsNil(o.AllowSquashMerge) {
		var ret bool
		return ret
	}
	return *o.AllowSquashMerge
}

// GetAllowSquashMergeOk returns a tuple with the AllowSquashMerge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetAllowSquashMergeOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowSquashMerge) {
		return nil, false
	}
	return o.AllowSquashMerge, true
}

// HasAllowSquashMerge returns a boolean if a field has been set.
func (o *GithubRepository) HasAllowSquashMerge() bool {
	if o != nil && !IsNil(o.AllowSquashMerge) {
		return true
	}

	return false
}

// SetAllowSquashMerge gets a reference to the given bool and assigns it to the AllowSquashMerge field.
func (o *GithubRepository) SetAllowSquashMerge(v bool) {
	o.AllowSquashMerge = &v
}

// GetArchiveUrl returns the ArchiveUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetArchiveUrl() string {
	if o == nil || IsNil(o.ArchiveUrl) {
		var ret string
		return ret
	}
	return *o.ArchiveUrl
}

// GetArchiveUrlOk returns a tuple with the ArchiveUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetArchiveUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ArchiveUrl) {
		return nil, false
	}
	return o.ArchiveUrl, true
}

// HasArchiveUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasArchiveUrl() bool {
	if o != nil && !IsNil(o.ArchiveUrl) {
		return true
	}

	return false
}

// SetArchiveUrl gets a reference to the given string and assigns it to the ArchiveUrl field.
func (o *GithubRepository) SetArchiveUrl(v string) {
	o.ArchiveUrl = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *GithubRepository) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *GithubRepository) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *GithubRepository) SetArchived(v bool) {
	o.Archived = &v
}

// GetAssigneesUrl returns the AssigneesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetAssigneesUrl() string {
	if o == nil || IsNil(o.AssigneesUrl) {
		var ret string
		return ret
	}
	return *o.AssigneesUrl
}

// GetAssigneesUrlOk returns a tuple with the AssigneesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetAssigneesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AssigneesUrl) {
		return nil, false
	}
	return o.AssigneesUrl, true
}

// HasAssigneesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasAssigneesUrl() bool {
	if o != nil && !IsNil(o.AssigneesUrl) {
		return true
	}

	return false
}

// SetAssigneesUrl gets a reference to the given string and assigns it to the AssigneesUrl field.
func (o *GithubRepository) SetAssigneesUrl(v string) {
	o.AssigneesUrl = &v
}

// GetAutoInit returns the AutoInit field value if set, zero value otherwise.
func (o *GithubRepository) GetAutoInit() bool {
	if o == nil || IsNil(o.AutoInit) {
		var ret bool
		return ret
	}
	return *o.AutoInit
}

// GetAutoInitOk returns a tuple with the AutoInit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetAutoInitOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoInit) {
		return nil, false
	}
	return o.AutoInit, true
}

// HasAutoInit returns a boolean if a field has been set.
func (o *GithubRepository) HasAutoInit() bool {
	if o != nil && !IsNil(o.AutoInit) {
		return true
	}

	return false
}

// SetAutoInit gets a reference to the given bool and assigns it to the AutoInit field.
func (o *GithubRepository) SetAutoInit(v bool) {
	o.AutoInit = &v
}

// GetBlobsUrl returns the BlobsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetBlobsUrl() string {
	if o == nil || IsNil(o.BlobsUrl) {
		var ret string
		return ret
	}
	return *o.BlobsUrl
}

// GetBlobsUrlOk returns a tuple with the BlobsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetBlobsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BlobsUrl) {
		return nil, false
	}
	return o.BlobsUrl, true
}

// HasBlobsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasBlobsUrl() bool {
	if o != nil && !IsNil(o.BlobsUrl) {
		return true
	}

	return false
}

// SetBlobsUrl gets a reference to the given string and assigns it to the BlobsUrl field.
func (o *GithubRepository) SetBlobsUrl(v string) {
	o.BlobsUrl = &v
}

// GetBranchesUrl returns the BranchesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetBranchesUrl() string {
	if o == nil || IsNil(o.BranchesUrl) {
		var ret string
		return ret
	}
	return *o.BranchesUrl
}

// GetBranchesUrlOk returns a tuple with the BranchesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetBranchesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BranchesUrl) {
		return nil, false
	}
	return o.BranchesUrl, true
}

// HasBranchesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasBranchesUrl() bool {
	if o != nil && !IsNil(o.BranchesUrl) {
		return true
	}

	return false
}

// SetBranchesUrl gets a reference to the given string and assigns it to the BranchesUrl field.
func (o *GithubRepository) SetBranchesUrl(v string) {
	o.BranchesUrl = &v
}

// GetCloneUrl returns the CloneUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetCloneUrl() string {
	if o == nil || IsNil(o.CloneUrl) {
		var ret string
		return ret
	}
	return *o.CloneUrl
}

// GetCloneUrlOk returns a tuple with the CloneUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetCloneUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CloneUrl) {
		return nil, false
	}
	return o.CloneUrl, true
}

// HasCloneUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasCloneUrl() bool {
	if o != nil && !IsNil(o.CloneUrl) {
		return true
	}

	return false
}

// SetCloneUrl gets a reference to the given string and assigns it to the CloneUrl field.
func (o *GithubRepository) SetCloneUrl(v string) {
	o.CloneUrl = &v
}

// GetCodeOfConduct returns the CodeOfConduct field value if set, zero value otherwise.
func (o *GithubRepository) GetCodeOfConduct() GithubCodeOfConduct {
	if o == nil || IsNil(o.CodeOfConduct) {
		var ret GithubCodeOfConduct
		return ret
	}
	return *o.CodeOfConduct
}

// GetCodeOfConductOk returns a tuple with the CodeOfConduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetCodeOfConductOk() (*GithubCodeOfConduct, bool) {
	if o == nil || IsNil(o.CodeOfConduct) {
		return nil, false
	}
	return o.CodeOfConduct, true
}

// HasCodeOfConduct returns a boolean if a field has been set.
func (o *GithubRepository) HasCodeOfConduct() bool {
	if o != nil && !IsNil(o.CodeOfConduct) {
		return true
	}

	return false
}

// SetCodeOfConduct gets a reference to the given GithubCodeOfConduct and assigns it to the CodeOfConduct field.
func (o *GithubRepository) SetCodeOfConduct(v GithubCodeOfConduct) {
	o.CodeOfConduct = &v
}

// GetCollaboratorsUrl returns the CollaboratorsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetCollaboratorsUrl() string {
	if o == nil || IsNil(o.CollaboratorsUrl) {
		var ret string
		return ret
	}
	return *o.CollaboratorsUrl
}

// GetCollaboratorsUrlOk returns a tuple with the CollaboratorsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetCollaboratorsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CollaboratorsUrl) {
		return nil, false
	}
	return o.CollaboratorsUrl, true
}

// HasCollaboratorsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasCollaboratorsUrl() bool {
	if o != nil && !IsNil(o.CollaboratorsUrl) {
		return true
	}

	return false
}

// SetCollaboratorsUrl gets a reference to the given string and assigns it to the CollaboratorsUrl field.
func (o *GithubRepository) SetCollaboratorsUrl(v string) {
	o.CollaboratorsUrl = &v
}

// GetCommentsUrl returns the CommentsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetCommentsUrl() string {
	if o == nil || IsNil(o.CommentsUrl) {
		var ret string
		return ret
	}
	return *o.CommentsUrl
}

// GetCommentsUrlOk returns a tuple with the CommentsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetCommentsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CommentsUrl) {
		return nil, false
	}
	return o.CommentsUrl, true
}

// HasCommentsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasCommentsUrl() bool {
	if o != nil && !IsNil(o.CommentsUrl) {
		return true
	}

	return false
}

// SetCommentsUrl gets a reference to the given string and assigns it to the CommentsUrl field.
func (o *GithubRepository) SetCommentsUrl(v string) {
	o.CommentsUrl = &v
}

// GetCommitsUrl returns the CommitsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetCommitsUrl() string {
	if o == nil || IsNil(o.CommitsUrl) {
		var ret string
		return ret
	}
	return *o.CommitsUrl
}

// GetCommitsUrlOk returns a tuple with the CommitsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetCommitsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CommitsUrl) {
		return nil, false
	}
	return o.CommitsUrl, true
}

// HasCommitsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasCommitsUrl() bool {
	if o != nil && !IsNil(o.CommitsUrl) {
		return true
	}

	return false
}

// SetCommitsUrl gets a reference to the given string and assigns it to the CommitsUrl field.
func (o *GithubRepository) SetCommitsUrl(v string) {
	o.CommitsUrl = &v
}

// GetCompareUrl returns the CompareUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetCompareUrl() string {
	if o == nil || IsNil(o.CompareUrl) {
		var ret string
		return ret
	}
	return *o.CompareUrl
}

// GetCompareUrlOk returns a tuple with the CompareUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetCompareUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CompareUrl) {
		return nil, false
	}
	return o.CompareUrl, true
}

// HasCompareUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasCompareUrl() bool {
	if o != nil && !IsNil(o.CompareUrl) {
		return true
	}

	return false
}

// SetCompareUrl gets a reference to the given string and assigns it to the CompareUrl field.
func (o *GithubRepository) SetCompareUrl(v string) {
	o.CompareUrl = &v
}

// GetContentsUrl returns the ContentsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetContentsUrl() string {
	if o == nil || IsNil(o.ContentsUrl) {
		var ret string
		return ret
	}
	return *o.ContentsUrl
}

// GetContentsUrlOk returns a tuple with the ContentsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetContentsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ContentsUrl) {
		return nil, false
	}
	return o.ContentsUrl, true
}

// HasContentsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasContentsUrl() bool {
	if o != nil && !IsNil(o.ContentsUrl) {
		return true
	}

	return false
}

// SetContentsUrl gets a reference to the given string and assigns it to the ContentsUrl field.
func (o *GithubRepository) SetContentsUrl(v string) {
	o.ContentsUrl = &v
}

// GetContributorsUrl returns the ContributorsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetContributorsUrl() string {
	if o == nil || IsNil(o.ContributorsUrl) {
		var ret string
		return ret
	}
	return *o.ContributorsUrl
}

// GetContributorsUrlOk returns a tuple with the ContributorsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetContributorsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ContributorsUrl) {
		return nil, false
	}
	return o.ContributorsUrl, true
}

// HasContributorsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasContributorsUrl() bool {
	if o != nil && !IsNil(o.ContributorsUrl) {
		return true
	}

	return false
}

// SetContributorsUrl gets a reference to the given string and assigns it to the ContributorsUrl field.
func (o *GithubRepository) SetContributorsUrl(v string) {
	o.ContributorsUrl = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GithubRepository) GetCreatedAt() GithubTimestamp {
	if o == nil || IsNil(o.CreatedAt) {
		var ret GithubTimestamp
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetCreatedAtOk() (*GithubTimestamp, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GithubRepository) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given GithubTimestamp and assigns it to the CreatedAt field.
func (o *GithubRepository) SetCreatedAt(v GithubTimestamp) {
	o.CreatedAt = &v
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *GithubRepository) GetDefaultBranch() string {
	if o == nil || IsNil(o.DefaultBranch) {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetDefaultBranchOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBranch) {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *GithubRepository) HasDefaultBranch() bool {
	if o != nil && !IsNil(o.DefaultBranch) {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *GithubRepository) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetDeploymentsUrl returns the DeploymentsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetDeploymentsUrl() string {
	if o == nil || IsNil(o.DeploymentsUrl) {
		var ret string
		return ret
	}
	return *o.DeploymentsUrl
}

// GetDeploymentsUrlOk returns a tuple with the DeploymentsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetDeploymentsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DeploymentsUrl) {
		return nil, false
	}
	return o.DeploymentsUrl, true
}

// HasDeploymentsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasDeploymentsUrl() bool {
	if o != nil && !IsNil(o.DeploymentsUrl) {
		return true
	}

	return false
}

// SetDeploymentsUrl gets a reference to the given string and assigns it to the DeploymentsUrl field.
func (o *GithubRepository) SetDeploymentsUrl(v string) {
	o.DeploymentsUrl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GithubRepository) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GithubRepository) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GithubRepository) SetDescription(v string) {
	o.Description = &v
}

// GetDownloadsUrl returns the DownloadsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetDownloadsUrl() string {
	if o == nil || IsNil(o.DownloadsUrl) {
		var ret string
		return ret
	}
	return *o.DownloadsUrl
}

// GetDownloadsUrlOk returns a tuple with the DownloadsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetDownloadsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DownloadsUrl) {
		return nil, false
	}
	return o.DownloadsUrl, true
}

// HasDownloadsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasDownloadsUrl() bool {
	if o != nil && !IsNil(o.DownloadsUrl) {
		return true
	}

	return false
}

// SetDownloadsUrl gets a reference to the given string and assigns it to the DownloadsUrl field.
func (o *GithubRepository) SetDownloadsUrl(v string) {
	o.DownloadsUrl = &v
}

// GetEventsUrl returns the EventsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetEventsUrl() string {
	if o == nil || IsNil(o.EventsUrl) {
		var ret string
		return ret
	}
	return *o.EventsUrl
}

// GetEventsUrlOk returns a tuple with the EventsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetEventsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EventsUrl) {
		return nil, false
	}
	return o.EventsUrl, true
}

// HasEventsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasEventsUrl() bool {
	if o != nil && !IsNil(o.EventsUrl) {
		return true
	}

	return false
}

// SetEventsUrl gets a reference to the given string and assigns it to the EventsUrl field.
func (o *GithubRepository) SetEventsUrl(v string) {
	o.EventsUrl = &v
}

// GetFork returns the Fork field value if set, zero value otherwise.
func (o *GithubRepository) GetFork() bool {
	if o == nil || IsNil(o.Fork) {
		var ret bool
		return ret
	}
	return *o.Fork
}

// GetForkOk returns a tuple with the Fork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetForkOk() (*bool, bool) {
	if o == nil || IsNil(o.Fork) {
		return nil, false
	}
	return o.Fork, true
}

// HasFork returns a boolean if a field has been set.
func (o *GithubRepository) HasFork() bool {
	if o != nil && !IsNil(o.Fork) {
		return true
	}

	return false
}

// SetFork gets a reference to the given bool and assigns it to the Fork field.
func (o *GithubRepository) SetFork(v bool) {
	o.Fork = &v
}

// GetForksCount returns the ForksCount field value if set, zero value otherwise.
func (o *GithubRepository) GetForksCount() int32 {
	if o == nil || IsNil(o.ForksCount) {
		var ret int32
		return ret
	}
	return *o.ForksCount
}

// GetForksCountOk returns a tuple with the ForksCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetForksCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ForksCount) {
		return nil, false
	}
	return o.ForksCount, true
}

// HasForksCount returns a boolean if a field has been set.
func (o *GithubRepository) HasForksCount() bool {
	if o != nil && !IsNil(o.ForksCount) {
		return true
	}

	return false
}

// SetForksCount gets a reference to the given int32 and assigns it to the ForksCount field.
func (o *GithubRepository) SetForksCount(v int32) {
	o.ForksCount = &v
}

// GetForksUrl returns the ForksUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetForksUrl() string {
	if o == nil || IsNil(o.ForksUrl) {
		var ret string
		return ret
	}
	return *o.ForksUrl
}

// GetForksUrlOk returns a tuple with the ForksUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetForksUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ForksUrl) {
		return nil, false
	}
	return o.ForksUrl, true
}

// HasForksUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasForksUrl() bool {
	if o != nil && !IsNil(o.ForksUrl) {
		return true
	}

	return false
}

// SetForksUrl gets a reference to the given string and assigns it to the ForksUrl field.
func (o *GithubRepository) SetForksUrl(v string) {
	o.ForksUrl = &v
}

// GetFullName returns the FullName field value if set, zero value otherwise.
func (o *GithubRepository) GetFullName() string {
	if o == nil || IsNil(o.FullName) {
		var ret string
		return ret
	}
	return *o.FullName
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.FullName) {
		return nil, false
	}
	return o.FullName, true
}

// HasFullName returns a boolean if a field has been set.
func (o *GithubRepository) HasFullName() bool {
	if o != nil && !IsNil(o.FullName) {
		return true
	}

	return false
}

// SetFullName gets a reference to the given string and assigns it to the FullName field.
func (o *GithubRepository) SetFullName(v string) {
	o.FullName = &v
}

// GetGitCommitsUrl returns the GitCommitsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetGitCommitsUrl() string {
	if o == nil || IsNil(o.GitCommitsUrl) {
		var ret string
		return ret
	}
	return *o.GitCommitsUrl
}

// GetGitCommitsUrlOk returns a tuple with the GitCommitsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetGitCommitsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitCommitsUrl) {
		return nil, false
	}
	return o.GitCommitsUrl, true
}

// HasGitCommitsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasGitCommitsUrl() bool {
	if o != nil && !IsNil(o.GitCommitsUrl) {
		return true
	}

	return false
}

// SetGitCommitsUrl gets a reference to the given string and assigns it to the GitCommitsUrl field.
func (o *GithubRepository) SetGitCommitsUrl(v string) {
	o.GitCommitsUrl = &v
}

// GetGitRefsUrl returns the GitRefsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetGitRefsUrl() string {
	if o == nil || IsNil(o.GitRefsUrl) {
		var ret string
		return ret
	}
	return *o.GitRefsUrl
}

// GetGitRefsUrlOk returns a tuple with the GitRefsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetGitRefsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitRefsUrl) {
		return nil, false
	}
	return o.GitRefsUrl, true
}

// HasGitRefsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasGitRefsUrl() bool {
	if o != nil && !IsNil(o.GitRefsUrl) {
		return true
	}

	return false
}

// SetGitRefsUrl gets a reference to the given string and assigns it to the GitRefsUrl field.
func (o *GithubRepository) SetGitRefsUrl(v string) {
	o.GitRefsUrl = &v
}

// GetGitTagsUrl returns the GitTagsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetGitTagsUrl() string {
	if o == nil || IsNil(o.GitTagsUrl) {
		var ret string
		return ret
	}
	return *o.GitTagsUrl
}

// GetGitTagsUrlOk returns a tuple with the GitTagsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetGitTagsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitTagsUrl) {
		return nil, false
	}
	return o.GitTagsUrl, true
}

// HasGitTagsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasGitTagsUrl() bool {
	if o != nil && !IsNil(o.GitTagsUrl) {
		return true
	}

	return false
}

// SetGitTagsUrl gets a reference to the given string and assigns it to the GitTagsUrl field.
func (o *GithubRepository) SetGitTagsUrl(v string) {
	o.GitTagsUrl = &v
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetGitUrl() string {
	if o == nil || IsNil(o.GitUrl) {
		var ret string
		return ret
	}
	return *o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetGitUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitUrl) {
		return nil, false
	}
	return o.GitUrl, true
}

// HasGitUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasGitUrl() bool {
	if o != nil && !IsNil(o.GitUrl) {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given string and assigns it to the GitUrl field.
func (o *GithubRepository) SetGitUrl(v string) {
	o.GitUrl = &v
}

// GetGitignoreTemplate returns the GitignoreTemplate field value if set, zero value otherwise.
func (o *GithubRepository) GetGitignoreTemplate() string {
	if o == nil || IsNil(o.GitignoreTemplate) {
		var ret string
		return ret
	}
	return *o.GitignoreTemplate
}

// GetGitignoreTemplateOk returns a tuple with the GitignoreTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetGitignoreTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.GitignoreTemplate) {
		return nil, false
	}
	return o.GitignoreTemplate, true
}

// HasGitignoreTemplate returns a boolean if a field has been set.
func (o *GithubRepository) HasGitignoreTemplate() bool {
	if o != nil && !IsNil(o.GitignoreTemplate) {
		return true
	}

	return false
}

// SetGitignoreTemplate gets a reference to the given string and assigns it to the GitignoreTemplate field.
func (o *GithubRepository) SetGitignoreTemplate(v string) {
	o.GitignoreTemplate = &v
}

// GetHasDownloads returns the HasDownloads field value if set, zero value otherwise.
func (o *GithubRepository) GetHasDownloads() bool {
	if o == nil || IsNil(o.HasDownloads) {
		var ret bool
		return ret
	}
	return *o.HasDownloads
}

// GetHasDownloadsOk returns a tuple with the HasDownloads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetHasDownloadsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDownloads) {
		return nil, false
	}
	return o.HasDownloads, true
}

// HasHasDownloads returns a boolean if a field has been set.
func (o *GithubRepository) HasHasDownloads() bool {
	if o != nil && !IsNil(o.HasDownloads) {
		return true
	}

	return false
}

// SetHasDownloads gets a reference to the given bool and assigns it to the HasDownloads field.
func (o *GithubRepository) SetHasDownloads(v bool) {
	o.HasDownloads = &v
}

// GetHasIssues returns the HasIssues field value if set, zero value otherwise.
func (o *GithubRepository) GetHasIssues() bool {
	if o == nil || IsNil(o.HasIssues) {
		var ret bool
		return ret
	}
	return *o.HasIssues
}

// GetHasIssuesOk returns a tuple with the HasIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetHasIssuesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasIssues) {
		return nil, false
	}
	return o.HasIssues, true
}

// HasHasIssues returns a boolean if a field has been set.
func (o *GithubRepository) HasHasIssues() bool {
	if o != nil && !IsNil(o.HasIssues) {
		return true
	}

	return false
}

// SetHasIssues gets a reference to the given bool and assigns it to the HasIssues field.
func (o *GithubRepository) SetHasIssues(v bool) {
	o.HasIssues = &v
}

// GetHasPages returns the HasPages field value if set, zero value otherwise.
func (o *GithubRepository) GetHasPages() bool {
	if o == nil || IsNil(o.HasPages) {
		var ret bool
		return ret
	}
	return *o.HasPages
}

// GetHasPagesOk returns a tuple with the HasPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetHasPagesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasPages) {
		return nil, false
	}
	return o.HasPages, true
}

// HasHasPages returns a boolean if a field has been set.
func (o *GithubRepository) HasHasPages() bool {
	if o != nil && !IsNil(o.HasPages) {
		return true
	}

	return false
}

// SetHasPages gets a reference to the given bool and assigns it to the HasPages field.
func (o *GithubRepository) SetHasPages(v bool) {
	o.HasPages = &v
}

// GetHasProjects returns the HasProjects field value if set, zero value otherwise.
func (o *GithubRepository) GetHasProjects() bool {
	if o == nil || IsNil(o.HasProjects) {
		var ret bool
		return ret
	}
	return *o.HasProjects
}

// GetHasProjectsOk returns a tuple with the HasProjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetHasProjectsOk() (*bool, bool) {
	if o == nil || IsNil(o.HasProjects) {
		return nil, false
	}
	return o.HasProjects, true
}

// HasHasProjects returns a boolean if a field has been set.
func (o *GithubRepository) HasHasProjects() bool {
	if o != nil && !IsNil(o.HasProjects) {
		return true
	}

	return false
}

// SetHasProjects gets a reference to the given bool and assigns it to the HasProjects field.
func (o *GithubRepository) SetHasProjects(v bool) {
	o.HasProjects = &v
}

// GetHasWiki returns the HasWiki field value if set, zero value otherwise.
func (o *GithubRepository) GetHasWiki() bool {
	if o == nil || IsNil(o.HasWiki) {
		var ret bool
		return ret
	}
	return *o.HasWiki
}

// GetHasWikiOk returns a tuple with the HasWiki field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetHasWikiOk() (*bool, bool) {
	if o == nil || IsNil(o.HasWiki) {
		return nil, false
	}
	return o.HasWiki, true
}

// HasHasWiki returns a boolean if a field has been set.
func (o *GithubRepository) HasHasWiki() bool {
	if o != nil && !IsNil(o.HasWiki) {
		return true
	}

	return false
}

// SetHasWiki gets a reference to the given bool and assigns it to the HasWiki field.
func (o *GithubRepository) SetHasWiki(v bool) {
	o.HasWiki = &v
}

// GetHomepage returns the Homepage field value if set, zero value otherwise.
func (o *GithubRepository) GetHomepage() string {
	if o == nil || IsNil(o.Homepage) {
		var ret string
		return ret
	}
	return *o.Homepage
}

// GetHomepageOk returns a tuple with the Homepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetHomepageOk() (*string, bool) {
	if o == nil || IsNil(o.Homepage) {
		return nil, false
	}
	return o.Homepage, true
}

// HasHomepage returns a boolean if a field has been set.
func (o *GithubRepository) HasHomepage() bool {
	if o != nil && !IsNil(o.Homepage) {
		return true
	}

	return false
}

// SetHomepage gets a reference to the given string and assigns it to the Homepage field.
func (o *GithubRepository) SetHomepage(v string) {
	o.Homepage = &v
}

// GetHooksUrl returns the HooksUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetHooksUrl() string {
	if o == nil || IsNil(o.HooksUrl) {
		var ret string
		return ret
	}
	return *o.HooksUrl
}

// GetHooksUrlOk returns a tuple with the HooksUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetHooksUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HooksUrl) {
		return nil, false
	}
	return o.HooksUrl, true
}

// HasHooksUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasHooksUrl() bool {
	if o != nil && !IsNil(o.HooksUrl) {
		return true
	}

	return false
}

// SetHooksUrl gets a reference to the given string and assigns it to the HooksUrl field.
func (o *GithubRepository) SetHooksUrl(v string) {
	o.HooksUrl = &v
}

// GetHtmlUrl returns the HtmlUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetHtmlUrl() string {
	if o == nil || IsNil(o.HtmlUrl) {
		var ret string
		return ret
	}
	return *o.HtmlUrl
}

// GetHtmlUrlOk returns a tuple with the HtmlUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetHtmlUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HtmlUrl) {
		return nil, false
	}
	return o.HtmlUrl, true
}

// HasHtmlUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasHtmlUrl() bool {
	if o != nil && !IsNil(o.HtmlUrl) {
		return true
	}

	return false
}

// SetHtmlUrl gets a reference to the given string and assigns it to the HtmlUrl field.
func (o *GithubRepository) SetHtmlUrl(v string) {
	o.HtmlUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *GithubRepository) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *GithubRepository) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *GithubRepository) SetId(v int32) {
	o.Id = &v
}

// GetIssueCommentUrl returns the IssueCommentUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetIssueCommentUrl() string {
	if o == nil || IsNil(o.IssueCommentUrl) {
		var ret string
		return ret
	}
	return *o.IssueCommentUrl
}

// GetIssueCommentUrlOk returns a tuple with the IssueCommentUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetIssueCommentUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IssueCommentUrl) {
		return nil, false
	}
	return o.IssueCommentUrl, true
}

// HasIssueCommentUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasIssueCommentUrl() bool {
	if o != nil && !IsNil(o.IssueCommentUrl) {
		return true
	}

	return false
}

// SetIssueCommentUrl gets a reference to the given string and assigns it to the IssueCommentUrl field.
func (o *GithubRepository) SetIssueCommentUrl(v string) {
	o.IssueCommentUrl = &v
}

// GetIssueEventsUrl returns the IssueEventsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetIssueEventsUrl() string {
	if o == nil || IsNil(o.IssueEventsUrl) {
		var ret string
		return ret
	}
	return *o.IssueEventsUrl
}

// GetIssueEventsUrlOk returns a tuple with the IssueEventsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetIssueEventsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IssueEventsUrl) {
		return nil, false
	}
	return o.IssueEventsUrl, true
}

// HasIssueEventsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasIssueEventsUrl() bool {
	if o != nil && !IsNil(o.IssueEventsUrl) {
		return true
	}

	return false
}

// SetIssueEventsUrl gets a reference to the given string and assigns it to the IssueEventsUrl field.
func (o *GithubRepository) SetIssueEventsUrl(v string) {
	o.IssueEventsUrl = &v
}

// GetIssuesUrl returns the IssuesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetIssuesUrl() string {
	if o == nil || IsNil(o.IssuesUrl) {
		var ret string
		return ret
	}
	return *o.IssuesUrl
}

// GetIssuesUrlOk returns a tuple with the IssuesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetIssuesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IssuesUrl) {
		return nil, false
	}
	return o.IssuesUrl, true
}

// HasIssuesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasIssuesUrl() bool {
	if o != nil && !IsNil(o.IssuesUrl) {
		return true
	}

	return false
}

// SetIssuesUrl gets a reference to the given string and assigns it to the IssuesUrl field.
func (o *GithubRepository) SetIssuesUrl(v string) {
	o.IssuesUrl = &v
}

// GetKeysUrl returns the KeysUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetKeysUrl() string {
	if o == nil || IsNil(o.KeysUrl) {
		var ret string
		return ret
	}
	return *o.KeysUrl
}

// GetKeysUrlOk returns a tuple with the KeysUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetKeysUrlOk() (*string, bool) {
	if o == nil || IsNil(o.KeysUrl) {
		return nil, false
	}
	return o.KeysUrl, true
}

// HasKeysUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasKeysUrl() bool {
	if o != nil && !IsNil(o.KeysUrl) {
		return true
	}

	return false
}

// SetKeysUrl gets a reference to the given string and assigns it to the KeysUrl field.
func (o *GithubRepository) SetKeysUrl(v string) {
	o.KeysUrl = &v
}

// GetLabelsUrl returns the LabelsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetLabelsUrl() string {
	if o == nil || IsNil(o.LabelsUrl) {
		var ret string
		return ret
	}
	return *o.LabelsUrl
}

// GetLabelsUrlOk returns a tuple with the LabelsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetLabelsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LabelsUrl) {
		return nil, false
	}
	return o.LabelsUrl, true
}

// HasLabelsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasLabelsUrl() bool {
	if o != nil && !IsNil(o.LabelsUrl) {
		return true
	}

	return false
}

// SetLabelsUrl gets a reference to the given string and assigns it to the LabelsUrl field.
func (o *GithubRepository) SetLabelsUrl(v string) {
	o.LabelsUrl = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *GithubRepository) GetLanguage() string {
	if o == nil || IsNil(o.Language) {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *GithubRepository) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *GithubRepository) SetLanguage(v string) {
	o.Language = &v
}

// GetLanguagesUrl returns the LanguagesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetLanguagesUrl() string {
	if o == nil || IsNil(o.LanguagesUrl) {
		var ret string
		return ret
	}
	return *o.LanguagesUrl
}

// GetLanguagesUrlOk returns a tuple with the LanguagesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetLanguagesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LanguagesUrl) {
		return nil, false
	}
	return o.LanguagesUrl, true
}

// HasLanguagesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasLanguagesUrl() bool {
	if o != nil && !IsNil(o.LanguagesUrl) {
		return true
	}

	return false
}

// SetLanguagesUrl gets a reference to the given string and assigns it to the LanguagesUrl field.
func (o *GithubRepository) SetLanguagesUrl(v string) {
	o.LanguagesUrl = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *GithubRepository) GetLicense() GithubLicense {
	if o == nil || IsNil(o.License) {
		var ret GithubLicense
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetLicenseOk() (*GithubLicense, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *GithubRepository) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given GithubLicense and assigns it to the License field.
func (o *GithubRepository) SetLicense(v GithubLicense) {
	o.License = &v
}

// GetLicenseTemplate returns the LicenseTemplate field value if set, zero value otherwise.
func (o *GithubRepository) GetLicenseTemplate() string {
	if o == nil || IsNil(o.LicenseTemplate) {
		var ret string
		return ret
	}
	return *o.LicenseTemplate
}

// GetLicenseTemplateOk returns a tuple with the LicenseTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetLicenseTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseTemplate) {
		return nil, false
	}
	return o.LicenseTemplate, true
}

// HasLicenseTemplate returns a boolean if a field has been set.
func (o *GithubRepository) HasLicenseTemplate() bool {
	if o != nil && !IsNil(o.LicenseTemplate) {
		return true
	}

	return false
}

// SetLicenseTemplate gets a reference to the given string and assigns it to the LicenseTemplate field.
func (o *GithubRepository) SetLicenseTemplate(v string) {
	o.LicenseTemplate = &v
}

// GetMasterBranch returns the MasterBranch field value if set, zero value otherwise.
func (o *GithubRepository) GetMasterBranch() string {
	if o == nil || IsNil(o.MasterBranch) {
		var ret string
		return ret
	}
	return *o.MasterBranch
}

// GetMasterBranchOk returns a tuple with the MasterBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetMasterBranchOk() (*string, bool) {
	if o == nil || IsNil(o.MasterBranch) {
		return nil, false
	}
	return o.MasterBranch, true
}

// HasMasterBranch returns a boolean if a field has been set.
func (o *GithubRepository) HasMasterBranch() bool {
	if o != nil && !IsNil(o.MasterBranch) {
		return true
	}

	return false
}

// SetMasterBranch gets a reference to the given string and assigns it to the MasterBranch field.
func (o *GithubRepository) SetMasterBranch(v string) {
	o.MasterBranch = &v
}

// GetMergesUrl returns the MergesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetMergesUrl() string {
	if o == nil || IsNil(o.MergesUrl) {
		var ret string
		return ret
	}
	return *o.MergesUrl
}

// GetMergesUrlOk returns a tuple with the MergesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetMergesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MergesUrl) {
		return nil, false
	}
	return o.MergesUrl, true
}

// HasMergesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasMergesUrl() bool {
	if o != nil && !IsNil(o.MergesUrl) {
		return true
	}

	return false
}

// SetMergesUrl gets a reference to the given string and assigns it to the MergesUrl field.
func (o *GithubRepository) SetMergesUrl(v string) {
	o.MergesUrl = &v
}

// GetMilestonesUrl returns the MilestonesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetMilestonesUrl() string {
	if o == nil || IsNil(o.MilestonesUrl) {
		var ret string
		return ret
	}
	return *o.MilestonesUrl
}

// GetMilestonesUrlOk returns a tuple with the MilestonesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetMilestonesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MilestonesUrl) {
		return nil, false
	}
	return o.MilestonesUrl, true
}

// HasMilestonesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasMilestonesUrl() bool {
	if o != nil && !IsNil(o.MilestonesUrl) {
		return true
	}

	return false
}

// SetMilestonesUrl gets a reference to the given string and assigns it to the MilestonesUrl field.
func (o *GithubRepository) SetMilestonesUrl(v string) {
	o.MilestonesUrl = &v
}

// GetMirrorUrl returns the MirrorUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetMirrorUrl() string {
	if o == nil || IsNil(o.MirrorUrl) {
		var ret string
		return ret
	}
	return *o.MirrorUrl
}

// GetMirrorUrlOk returns a tuple with the MirrorUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetMirrorUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MirrorUrl) {
		return nil, false
	}
	return o.MirrorUrl, true
}

// HasMirrorUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasMirrorUrl() bool {
	if o != nil && !IsNil(o.MirrorUrl) {
		return true
	}

	return false
}

// SetMirrorUrl gets a reference to the given string and assigns it to the MirrorUrl field.
func (o *GithubRepository) SetMirrorUrl(v string) {
	o.MirrorUrl = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GithubRepository) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GithubRepository) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GithubRepository) SetName(v string) {
	o.Name = &v
}

// GetNetworkCount returns the NetworkCount field value if set, zero value otherwise.
func (o *GithubRepository) GetNetworkCount() int32 {
	if o == nil || IsNil(o.NetworkCount) {
		var ret int32
		return ret
	}
	return *o.NetworkCount
}

// GetNetworkCountOk returns a tuple with the NetworkCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetNetworkCountOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkCount) {
		return nil, false
	}
	return o.NetworkCount, true
}

// HasNetworkCount returns a boolean if a field has been set.
func (o *GithubRepository) HasNetworkCount() bool {
	if o != nil && !IsNil(o.NetworkCount) {
		return true
	}

	return false
}

// SetNetworkCount gets a reference to the given int32 and assigns it to the NetworkCount field.
func (o *GithubRepository) SetNetworkCount(v int32) {
	o.NetworkCount = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *GithubRepository) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *GithubRepository) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *GithubRepository) SetNodeId(v string) {
	o.NodeId = &v
}

// GetNotificationsUrl returns the NotificationsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetNotificationsUrl() string {
	if o == nil || IsNil(o.NotificationsUrl) {
		var ret string
		return ret
	}
	return *o.NotificationsUrl
}

// GetNotificationsUrlOk returns a tuple with the NotificationsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetNotificationsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.NotificationsUrl) {
		return nil, false
	}
	return o.NotificationsUrl, true
}

// HasNotificationsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasNotificationsUrl() bool {
	if o != nil && !IsNil(o.NotificationsUrl) {
		return true
	}

	return false
}

// SetNotificationsUrl gets a reference to the given string and assigns it to the NotificationsUrl field.
func (o *GithubRepository) SetNotificationsUrl(v string) {
	o.NotificationsUrl = &v
}

// GetOpenIssuesCount returns the OpenIssuesCount field value if set, zero value otherwise.
func (o *GithubRepository) GetOpenIssuesCount() int32 {
	if o == nil || IsNil(o.OpenIssuesCount) {
		var ret int32
		return ret
	}
	return *o.OpenIssuesCount
}

// GetOpenIssuesCountOk returns a tuple with the OpenIssuesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetOpenIssuesCountOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenIssuesCount) {
		return nil, false
	}
	return o.OpenIssuesCount, true
}

// HasOpenIssuesCount returns a boolean if a field has been set.
func (o *GithubRepository) HasOpenIssuesCount() bool {
	if o != nil && !IsNil(o.OpenIssuesCount) {
		return true
	}

	return false
}

// SetOpenIssuesCount gets a reference to the given int32 and assigns it to the OpenIssuesCount field.
func (o *GithubRepository) SetOpenIssuesCount(v int32) {
	o.OpenIssuesCount = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *GithubRepository) GetOrganization() GithubOrganization {
	if o == nil || IsNil(o.Organization) {
		var ret GithubOrganization
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetOrganizationOk() (*GithubOrganization, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *GithubRepository) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given GithubOrganization and assigns it to the Organization field.
func (o *GithubRepository) SetOrganization(v GithubOrganization) {
	o.Organization = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *GithubRepository) GetOwner() GithubUser {
	if o == nil || IsNil(o.Owner) {
		var ret GithubUser
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetOwnerOk() (*GithubUser, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *GithubRepository) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given GithubUser and assigns it to the Owner field.
func (o *GithubRepository) SetOwner(v GithubUser) {
	o.Owner = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *GithubRepository) GetParent() GithubRepository {
	if o == nil || IsNil(o.Parent) {
		var ret GithubRepository
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetParentOk() (*GithubRepository, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *GithubRepository) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given GithubRepository and assigns it to the Parent field.
func (o *GithubRepository) SetParent(v GithubRepository) {
	o.Parent = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *GithubRepository) GetPermissions() map[string]bool {
	if o == nil || IsNil(o.Permissions) {
		var ret map[string]bool
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetPermissionsOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *GithubRepository) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given map[string]bool and assigns it to the Permissions field.
func (o *GithubRepository) SetPermissions(v map[string]bool) {
	o.Permissions = &v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *GithubRepository) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *GithubRepository) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *GithubRepository) SetPrivate(v bool) {
	o.Private = &v
}

// GetPullsUrl returns the PullsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetPullsUrl() string {
	if o == nil || IsNil(o.PullsUrl) {
		var ret string
		return ret
	}
	return *o.PullsUrl
}

// GetPullsUrlOk returns a tuple with the PullsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetPullsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.PullsUrl) {
		return nil, false
	}
	return o.PullsUrl, true
}

// HasPullsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasPullsUrl() bool {
	if o != nil && !IsNil(o.PullsUrl) {
		return true
	}

	return false
}

// SetPullsUrl gets a reference to the given string and assigns it to the PullsUrl field.
func (o *GithubRepository) SetPullsUrl(v string) {
	o.PullsUrl = &v
}

// GetPushedAt returns the PushedAt field value if set, zero value otherwise.
func (o *GithubRepository) GetPushedAt() GithubTimestamp {
	if o == nil || IsNil(o.PushedAt) {
		var ret GithubTimestamp
		return ret
	}
	return *o.PushedAt
}

// GetPushedAtOk returns a tuple with the PushedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetPushedAtOk() (*GithubTimestamp, bool) {
	if o == nil || IsNil(o.PushedAt) {
		return nil, false
	}
	return o.PushedAt, true
}

// HasPushedAt returns a boolean if a field has been set.
func (o *GithubRepository) HasPushedAt() bool {
	if o != nil && !IsNil(o.PushedAt) {
		return true
	}

	return false
}

// SetPushedAt gets a reference to the given GithubTimestamp and assigns it to the PushedAt field.
func (o *GithubRepository) SetPushedAt(v GithubTimestamp) {
	o.PushedAt = &v
}

// GetReleasesUrl returns the ReleasesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetReleasesUrl() string {
	if o == nil || IsNil(o.ReleasesUrl) {
		var ret string
		return ret
	}
	return *o.ReleasesUrl
}

// GetReleasesUrlOk returns a tuple with the ReleasesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetReleasesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ReleasesUrl) {
		return nil, false
	}
	return o.ReleasesUrl, true
}

// HasReleasesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasReleasesUrl() bool {
	if o != nil && !IsNil(o.ReleasesUrl) {
		return true
	}

	return false
}

// SetReleasesUrl gets a reference to the given string and assigns it to the ReleasesUrl field.
func (o *GithubRepository) SetReleasesUrl(v string) {
	o.ReleasesUrl = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *GithubRepository) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *GithubRepository) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *GithubRepository) SetSize(v int32) {
	o.Size = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *GithubRepository) GetSource() GithubRepository {
	if o == nil || IsNil(o.Source) {
		var ret GithubRepository
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetSourceOk() (*GithubRepository, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *GithubRepository) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given GithubRepository and assigns it to the Source field.
func (o *GithubRepository) SetSource(v GithubRepository) {
	o.Source = &v
}

// GetSshUrl returns the SshUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetSshUrl() string {
	if o == nil || IsNil(o.SshUrl) {
		var ret string
		return ret
	}
	return *o.SshUrl
}

// GetSshUrlOk returns a tuple with the SshUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetSshUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SshUrl) {
		return nil, false
	}
	return o.SshUrl, true
}

// HasSshUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasSshUrl() bool {
	if o != nil && !IsNil(o.SshUrl) {
		return true
	}

	return false
}

// SetSshUrl gets a reference to the given string and assigns it to the SshUrl field.
func (o *GithubRepository) SetSshUrl(v string) {
	o.SshUrl = &v
}

// GetStargazersCount returns the StargazersCount field value if set, zero value otherwise.
func (o *GithubRepository) GetStargazersCount() int32 {
	if o == nil || IsNil(o.StargazersCount) {
		var ret int32
		return ret
	}
	return *o.StargazersCount
}

// GetStargazersCountOk returns a tuple with the StargazersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetStargazersCountOk() (*int32, bool) {
	if o == nil || IsNil(o.StargazersCount) {
		return nil, false
	}
	return o.StargazersCount, true
}

// HasStargazersCount returns a boolean if a field has been set.
func (o *GithubRepository) HasStargazersCount() bool {
	if o != nil && !IsNil(o.StargazersCount) {
		return true
	}

	return false
}

// SetStargazersCount gets a reference to the given int32 and assigns it to the StargazersCount field.
func (o *GithubRepository) SetStargazersCount(v int32) {
	o.StargazersCount = &v
}

// GetStargazersUrl returns the StargazersUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetStargazersUrl() string {
	if o == nil || IsNil(o.StargazersUrl) {
		var ret string
		return ret
	}
	return *o.StargazersUrl
}

// GetStargazersUrlOk returns a tuple with the StargazersUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetStargazersUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StargazersUrl) {
		return nil, false
	}
	return o.StargazersUrl, true
}

// HasStargazersUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasStargazersUrl() bool {
	if o != nil && !IsNil(o.StargazersUrl) {
		return true
	}

	return false
}

// SetStargazersUrl gets a reference to the given string and assigns it to the StargazersUrl field.
func (o *GithubRepository) SetStargazersUrl(v string) {
	o.StargazersUrl = &v
}

// GetStatusesUrl returns the StatusesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetStatusesUrl() string {
	if o == nil || IsNil(o.StatusesUrl) {
		var ret string
		return ret
	}
	return *o.StatusesUrl
}

// GetStatusesUrlOk returns a tuple with the StatusesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetStatusesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.StatusesUrl) {
		return nil, false
	}
	return o.StatusesUrl, true
}

// HasStatusesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasStatusesUrl() bool {
	if o != nil && !IsNil(o.StatusesUrl) {
		return true
	}

	return false
}

// SetStatusesUrl gets a reference to the given string and assigns it to the StatusesUrl field.
func (o *GithubRepository) SetStatusesUrl(v string) {
	o.StatusesUrl = &v
}

// GetSubscribersCount returns the SubscribersCount field value if set, zero value otherwise.
func (o *GithubRepository) GetSubscribersCount() int32 {
	if o == nil || IsNil(o.SubscribersCount) {
		var ret int32
		return ret
	}
	return *o.SubscribersCount
}

// GetSubscribersCountOk returns a tuple with the SubscribersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetSubscribersCountOk() (*int32, bool) {
	if o == nil || IsNil(o.SubscribersCount) {
		return nil, false
	}
	return o.SubscribersCount, true
}

// HasSubscribersCount returns a boolean if a field has been set.
func (o *GithubRepository) HasSubscribersCount() bool {
	if o != nil && !IsNil(o.SubscribersCount) {
		return true
	}

	return false
}

// SetSubscribersCount gets a reference to the given int32 and assigns it to the SubscribersCount field.
func (o *GithubRepository) SetSubscribersCount(v int32) {
	o.SubscribersCount = &v
}

// GetSubscribersUrl returns the SubscribersUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetSubscribersUrl() string {
	if o == nil || IsNil(o.SubscribersUrl) {
		var ret string
		return ret
	}
	return *o.SubscribersUrl
}

// GetSubscribersUrlOk returns a tuple with the SubscribersUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetSubscribersUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SubscribersUrl) {
		return nil, false
	}
	return o.SubscribersUrl, true
}

// HasSubscribersUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasSubscribersUrl() bool {
	if o != nil && !IsNil(o.SubscribersUrl) {
		return true
	}

	return false
}

// SetSubscribersUrl gets a reference to the given string and assigns it to the SubscribersUrl field.
func (o *GithubRepository) SetSubscribersUrl(v string) {
	o.SubscribersUrl = &v
}

// GetSubscriptionUrl returns the SubscriptionUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetSubscriptionUrl() string {
	if o == nil || IsNil(o.SubscriptionUrl) {
		var ret string
		return ret
	}
	return *o.SubscriptionUrl
}

// GetSubscriptionUrlOk returns a tuple with the SubscriptionUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetSubscriptionUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SubscriptionUrl) {
		return nil, false
	}
	return o.SubscriptionUrl, true
}

// HasSubscriptionUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasSubscriptionUrl() bool {
	if o != nil && !IsNil(o.SubscriptionUrl) {
		return true
	}

	return false
}

// SetSubscriptionUrl gets a reference to the given string and assigns it to the SubscriptionUrl field.
func (o *GithubRepository) SetSubscriptionUrl(v string) {
	o.SubscriptionUrl = &v
}

// GetSvnUrl returns the SvnUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetSvnUrl() string {
	if o == nil || IsNil(o.SvnUrl) {
		var ret string
		return ret
	}
	return *o.SvnUrl
}

// GetSvnUrlOk returns a tuple with the SvnUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetSvnUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SvnUrl) {
		return nil, false
	}
	return o.SvnUrl, true
}

// HasSvnUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasSvnUrl() bool {
	if o != nil && !IsNil(o.SvnUrl) {
		return true
	}

	return false
}

// SetSvnUrl gets a reference to the given string and assigns it to the SvnUrl field.
func (o *GithubRepository) SetSvnUrl(v string) {
	o.SvnUrl = &v
}

// GetTagsUrl returns the TagsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetTagsUrl() string {
	if o == nil || IsNil(o.TagsUrl) {
		var ret string
		return ret
	}
	return *o.TagsUrl
}

// GetTagsUrlOk returns a tuple with the TagsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetTagsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TagsUrl) {
		return nil, false
	}
	return o.TagsUrl, true
}

// HasTagsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasTagsUrl() bool {
	if o != nil && !IsNil(o.TagsUrl) {
		return true
	}

	return false
}

// SetTagsUrl gets a reference to the given string and assigns it to the TagsUrl field.
func (o *GithubRepository) SetTagsUrl(v string) {
	o.TagsUrl = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *GithubRepository) GetTeamId() int32 {
	if o == nil || IsNil(o.TeamId) {
		var ret int32
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetTeamIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *GithubRepository) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given int32 and assigns it to the TeamId field.
func (o *GithubRepository) SetTeamId(v int32) {
	o.TeamId = &v
}

// GetTeamsUrl returns the TeamsUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetTeamsUrl() string {
	if o == nil || IsNil(o.TeamsUrl) {
		var ret string
		return ret
	}
	return *o.TeamsUrl
}

// GetTeamsUrlOk returns a tuple with the TeamsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetTeamsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TeamsUrl) {
		return nil, false
	}
	return o.TeamsUrl, true
}

// HasTeamsUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasTeamsUrl() bool {
	if o != nil && !IsNil(o.TeamsUrl) {
		return true
	}

	return false
}

// SetTeamsUrl gets a reference to the given string and assigns it to the TeamsUrl field.
func (o *GithubRepository) SetTeamsUrl(v string) {
	o.TeamsUrl = &v
}

// GetTextMatches returns the TextMatches field value if set, zero value otherwise.
func (o *GithubRepository) GetTextMatches() []GithubTextMatch {
	if o == nil || IsNil(o.TextMatches) {
		var ret []GithubTextMatch
		return ret
	}
	return o.TextMatches
}

// GetTextMatchesOk returns a tuple with the TextMatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetTextMatchesOk() ([]GithubTextMatch, bool) {
	if o == nil || IsNil(o.TextMatches) {
		return nil, false
	}
	return o.TextMatches, true
}

// HasTextMatches returns a boolean if a field has been set.
func (o *GithubRepository) HasTextMatches() bool {
	if o != nil && !IsNil(o.TextMatches) {
		return true
	}

	return false
}

// SetTextMatches gets a reference to the given []GithubTextMatch and assigns it to the TextMatches field.
func (o *GithubRepository) SetTextMatches(v []GithubTextMatch) {
	o.TextMatches = v
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *GithubRepository) GetTopics() []string {
	if o == nil || IsNil(o.Topics) {
		var ret []string
		return ret
	}
	return o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetTopicsOk() ([]string, bool) {
	if o == nil || IsNil(o.Topics) {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *GithubRepository) HasTopics() bool {
	if o != nil && !IsNil(o.Topics) {
		return true
	}

	return false
}

// SetTopics gets a reference to the given []string and assigns it to the Topics field.
func (o *GithubRepository) SetTopics(v []string) {
	o.Topics = v
}

// GetTreesUrl returns the TreesUrl field value if set, zero value otherwise.
func (o *GithubRepository) GetTreesUrl() string {
	if o == nil || IsNil(o.TreesUrl) {
		var ret string
		return ret
	}
	return *o.TreesUrl
}

// GetTreesUrlOk returns a tuple with the TreesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetTreesUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TreesUrl) {
		return nil, false
	}
	return o.TreesUrl, true
}

// HasTreesUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasTreesUrl() bool {
	if o != nil && !IsNil(o.TreesUrl) {
		return true
	}

	return false
}

// SetTreesUrl gets a reference to the given string and assigns it to the TreesUrl field.
func (o *GithubRepository) SetTreesUrl(v string) {
	o.TreesUrl = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *GithubRepository) GetUpdatedAt() GithubTimestamp {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret GithubTimestamp
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetUpdatedAtOk() (*GithubTimestamp, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *GithubRepository) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given GithubTimestamp and assigns it to the UpdatedAt field.
func (o *GithubRepository) SetUpdatedAt(v GithubTimestamp) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *GithubRepository) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *GithubRepository) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *GithubRepository) SetUrl(v string) {
	o.Url = &v
}

// GetWatchersCount returns the WatchersCount field value if set, zero value otherwise.
func (o *GithubRepository) GetWatchersCount() int32 {
	if o == nil || IsNil(o.WatchersCount) {
		var ret int32
		return ret
	}
	return *o.WatchersCount
}

// GetWatchersCountOk returns a tuple with the WatchersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubRepository) GetWatchersCountOk() (*int32, bool) {
	if o == nil || IsNil(o.WatchersCount) {
		return nil, false
	}
	return o.WatchersCount, true
}

// HasWatchersCount returns a boolean if a field has been set.
func (o *GithubRepository) HasWatchersCount() bool {
	if o != nil && !IsNil(o.WatchersCount) {
		return true
	}

	return false
}

// SetWatchersCount gets a reference to the given int32 and assigns it to the WatchersCount field.
func (o *GithubRepository) SetWatchersCount(v int32) {
	o.WatchersCount = &v
}

func (o GithubRepository) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubRepository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowMergeCommit) {
		toSerialize["allow_merge_commit"] = o.AllowMergeCommit
	}
	if !IsNil(o.AllowRebaseMerge) {
		toSerialize["allow_rebase_merge"] = o.AllowRebaseMerge
	}
	if !IsNil(o.AllowSquashMerge) {
		toSerialize["allow_squash_merge"] = o.AllowSquashMerge
	}
	if !IsNil(o.ArchiveUrl) {
		toSerialize["archive_url"] = o.ArchiveUrl
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.AssigneesUrl) {
		toSerialize["assignees_url"] = o.AssigneesUrl
	}
	if !IsNil(o.AutoInit) {
		toSerialize["auto_init"] = o.AutoInit
	}
	if !IsNil(o.BlobsUrl) {
		toSerialize["blobs_url"] = o.BlobsUrl
	}
	if !IsNil(o.BranchesUrl) {
		toSerialize["branches_url"] = o.BranchesUrl
	}
	if !IsNil(o.CloneUrl) {
		toSerialize["clone_url"] = o.CloneUrl
	}
	if !IsNil(o.CodeOfConduct) {
		toSerialize["code_of_conduct"] = o.CodeOfConduct
	}
	if !IsNil(o.CollaboratorsUrl) {
		toSerialize["collaborators_url"] = o.CollaboratorsUrl
	}
	if !IsNil(o.CommentsUrl) {
		toSerialize["comments_url"] = o.CommentsUrl
	}
	if !IsNil(o.CommitsUrl) {
		toSerialize["commits_url"] = o.CommitsUrl
	}
	if !IsNil(o.CompareUrl) {
		toSerialize["compare_url"] = o.CompareUrl
	}
	if !IsNil(o.ContentsUrl) {
		toSerialize["contents_url"] = o.ContentsUrl
	}
	if !IsNil(o.ContributorsUrl) {
		toSerialize["contributors_url"] = o.ContributorsUrl
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DefaultBranch) {
		toSerialize["default_branch"] = o.DefaultBranch
	}
	if !IsNil(o.DeploymentsUrl) {
		toSerialize["deployments_url"] = o.DeploymentsUrl
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DownloadsUrl) {
		toSerialize["downloads_url"] = o.DownloadsUrl
	}
	if !IsNil(o.EventsUrl) {
		toSerialize["events_url"] = o.EventsUrl
	}
	if !IsNil(o.Fork) {
		toSerialize["fork"] = o.Fork
	}
	if !IsNil(o.ForksCount) {
		toSerialize["forks_count"] = o.ForksCount
	}
	if !IsNil(o.ForksUrl) {
		toSerialize["forks_url"] = o.ForksUrl
	}
	if !IsNil(o.FullName) {
		toSerialize["full_name"] = o.FullName
	}
	if !IsNil(o.GitCommitsUrl) {
		toSerialize["git_commits_url"] = o.GitCommitsUrl
	}
	if !IsNil(o.GitRefsUrl) {
		toSerialize["git_refs_url"] = o.GitRefsUrl
	}
	if !IsNil(o.GitTagsUrl) {
		toSerialize["git_tags_url"] = o.GitTagsUrl
	}
	if !IsNil(o.GitUrl) {
		toSerialize["git_url"] = o.GitUrl
	}
	if !IsNil(o.GitignoreTemplate) {
		toSerialize["gitignore_template"] = o.GitignoreTemplate
	}
	if !IsNil(o.HasDownloads) {
		toSerialize["has_downloads"] = o.HasDownloads
	}
	if !IsNil(o.HasIssues) {
		toSerialize["has_issues"] = o.HasIssues
	}
	if !IsNil(o.HasPages) {
		toSerialize["has_pages"] = o.HasPages
	}
	if !IsNil(o.HasProjects) {
		toSerialize["has_projects"] = o.HasProjects
	}
	if !IsNil(o.HasWiki) {
		toSerialize["has_wiki"] = o.HasWiki
	}
	if !IsNil(o.Homepage) {
		toSerialize["homepage"] = o.Homepage
	}
	if !IsNil(o.HooksUrl) {
		toSerialize["hooks_url"] = o.HooksUrl
	}
	if !IsNil(o.HtmlUrl) {
		toSerialize["html_url"] = o.HtmlUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssueCommentUrl) {
		toSerialize["issue_comment_url"] = o.IssueCommentUrl
	}
	if !IsNil(o.IssueEventsUrl) {
		toSerialize["issue_events_url"] = o.IssueEventsUrl
	}
	if !IsNil(o.IssuesUrl) {
		toSerialize["issues_url"] = o.IssuesUrl
	}
	if !IsNil(o.KeysUrl) {
		toSerialize["keys_url"] = o.KeysUrl
	}
	if !IsNil(o.LabelsUrl) {
		toSerialize["labels_url"] = o.LabelsUrl
	}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.LanguagesUrl) {
		toSerialize["languages_url"] = o.LanguagesUrl
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	if !IsNil(o.LicenseTemplate) {
		toSerialize["license_template"] = o.LicenseTemplate
	}
	if !IsNil(o.MasterBranch) {
		toSerialize["master_branch"] = o.MasterBranch
	}
	if !IsNil(o.MergesUrl) {
		toSerialize["merges_url"] = o.MergesUrl
	}
	if !IsNil(o.MilestonesUrl) {
		toSerialize["milestones_url"] = o.MilestonesUrl
	}
	if !IsNil(o.MirrorUrl) {
		toSerialize["mirror_url"] = o.MirrorUrl
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NetworkCount) {
		toSerialize["network_count"] = o.NetworkCount
	}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.NotificationsUrl) {
		toSerialize["notifications_url"] = o.NotificationsUrl
	}
	if !IsNil(o.OpenIssuesCount) {
		toSerialize["open_issues_count"] = o.OpenIssuesCount
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.PullsUrl) {
		toSerialize["pulls_url"] = o.PullsUrl
	}
	if !IsNil(o.PushedAt) {
		toSerialize["pushed_at"] = o.PushedAt
	}
	if !IsNil(o.ReleasesUrl) {
		toSerialize["releases_url"] = o.ReleasesUrl
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.SshUrl) {
		toSerialize["ssh_url"] = o.SshUrl
	}
	if !IsNil(o.StargazersCount) {
		toSerialize["stargazers_count"] = o.StargazersCount
	}
	if !IsNil(o.StargazersUrl) {
		toSerialize["stargazers_url"] = o.StargazersUrl
	}
	if !IsNil(o.StatusesUrl) {
		toSerialize["statuses_url"] = o.StatusesUrl
	}
	if !IsNil(o.SubscribersCount) {
		toSerialize["subscribers_count"] = o.SubscribersCount
	}
	if !IsNil(o.SubscribersUrl) {
		toSerialize["subscribers_url"] = o.SubscribersUrl
	}
	if !IsNil(o.SubscriptionUrl) {
		toSerialize["subscription_url"] = o.SubscriptionUrl
	}
	if !IsNil(o.SvnUrl) {
		toSerialize["svn_url"] = o.SvnUrl
	}
	if !IsNil(o.TagsUrl) {
		toSerialize["tags_url"] = o.TagsUrl
	}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if !IsNil(o.TeamsUrl) {
		toSerialize["teams_url"] = o.TeamsUrl
	}
	if !IsNil(o.TextMatches) {
		toSerialize["text_matches"] = o.TextMatches
	}
	if !IsNil(o.Topics) {
		toSerialize["topics"] = o.Topics
	}
	if !IsNil(o.TreesUrl) {
		toSerialize["trees_url"] = o.TreesUrl
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.WatchersCount) {
		toSerialize["watchers_count"] = o.WatchersCount
	}
	return toSerialize, nil
}

type NullableGithubRepository struct {
	value *GithubRepository
	isSet bool
}

func (v NullableGithubRepository) Get() *GithubRepository {
	return v.value
}

func (v *NullableGithubRepository) Set(val *GithubRepository) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubRepository(val *GithubRepository) *NullableGithubRepository {
	return &NullableGithubRepository{value: val, isSet: true}
}

func (v NullableGithubRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
